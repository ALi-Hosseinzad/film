{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/test.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nexport default function App() {\n  const ListLoading = ContentLoading(ContentItems);\n  const [state, setState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"\"\n  });\n  const [loadMore, setLoadMore] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"\"\n  });\n\n  function LoadMore(url) {\n    InfiniteLis(\"/widgets/home-page?count=5\");\n    useEffect(() => {\n      getData(url, setLoadMore);\n    }, [setLoadMore]);\n  }\n\n  function InfiniteLis(url) {\n    useEffect(() => {\n      getData(url, setState);\n    }, [setState]);\n  }\n\n  function getData(url, set) {\n    const apiurl = \"http://api-v2.filmnet.ir\";\n    const URL = apiurl + url;\n    fetch(URL).then(res => res.json()).then(res => {\n      set({\n        loading: false,\n        repos: res,\n        nextURL: res.meta.next_url\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: 5,\n    hasMore: true,\n    inverse: true,\n    style: {\n      display: \"flex\",\n      flexDirection: \"column-reverse\"\n    },\n    val: console.log(state.nextURL),\n    next: LoadMore(state.nextURL),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: state.loading,\n    repos: state.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/test.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","App","ListLoading","state","setState","loading","repos","nextURL","loadMore","setLoadMore","LoadMore","url","InfiniteLis","getData","set","apiurl","URL","fetch","then","res","json","meta","next_url","display","flexDirection","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,eAAe,SAASC,GAAT,GAAe;AAC5B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC;AACjCQ,IAAAA,OAAO,EAAE,KADwB;AAEjCC,IAAAA,KAAK,EAAE,IAF0B;AAGjCC,IAAAA,OAAO,EAAC;AAHyB,GAAD,CAAlC;AAMA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAC;AAH+B,GAAD,CAAxC;;AAMA,WAASG,QAAT,CAAkBC,GAAlB,EAAuB;AACrBC,IAAAA,WAAW,CAAC,4BAAD,CAAX;AACAhB,IAAAA,SAAS,CAAC,MAAM;AACdiB,MAAAA,OAAO,CAACF,GAAD,EAAKF,WAAL,CAAP;AACD,KAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAGD;;AACD,WAASG,WAAT,CAAqBD,GAArB,EAA0B;AACxBf,IAAAA,SAAS,CAAC,MAAM;AACdiB,MAAAA,OAAO,CAACF,GAAD,EAAKP,QAAL,CAAP;AACD,KAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAGD;;AACD,WAASS,OAAT,CAAiBF,GAAjB,EAAqBG,GAArB,EAA0B;AACxB,UAAMC,MAAM,GAAG,0BAAf;AACA,UAAMC,GAAG,GAAGD,MAAM,GAAGJ,GAArB;AACAM,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAAS;AACbL,MAAAA,GAAG,CAAC;AACFT,QAAAA,OAAO,EAAE,KADP;AAEFC,QAAAA,KAAK,EAAEa,GAFL;AAGFZ,QAAAA,OAAO,EAAEY,GAAG,CAACE,IAAJ,CAASC;AAHhB,OAAD,CAAH;AAKD,KARH;AAUD;;AACD,sBACE,oBAAC,cAAD;AACA,IAAA,UAAU,EAAE,CADZ;AAEA,IAAA,OAAO,EAAE,IAFT;AAGA,IAAA,OAAO,EAAE,IAHT;AAIA,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,aAAa,EAAE;AAAlC,KAJP;AAKA,IAAA,GAAG,EAAEC,OAAO,CAACC,GAAR,CAAYvB,KAAK,CAACI,OAAlB,CALL;AAMA,IAAA,IAAI,EAAEG,QAAQ,CAACP,KAAK,CAACI,OAAP,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQA,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEJ,KAAK,CAACE,OAA9B;AAAuC,IAAA,KAAK,EAAEF,KAAK,CAACG,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARA,CADF;AAYD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nexport default function App() {\n  const ListLoading = ContentLoading(ContentItems);\n  const [state, setState] = useState({\n    loading: false,\n    repos: null,\n    nextURL:\"\",\n  });\n\n  const [loadMore, setLoadMore] = useState({\n    loading: false,\n    repos: null,\n    nextURL:\"\",\n  });\n\n  function LoadMore(url) {\n    InfiniteLis(\"/widgets/home-page?count=5\");\n    useEffect(() => {\n      getData(url,setLoadMore);\n    }, [setLoadMore]);\n  }\n  function InfiniteLis(url) {\n    useEffect(() => {\n      getData(url,setState);\n    }, [setState]);\n  }\n  function getData(url,set) {\n    const apiurl = \"http://api-v2.filmnet.ir\";\n    const URL = apiurl + url;\n    fetch(URL)\n      .then((res) => res.json())\n      .then((res) => {\n        set({\n          loading: false,\n          repos: res,\n          nextURL: res.meta.next_url,\n        });\n      });\n      \n  }\n  return (\n    <InfiniteScroll\n    dataLength={5}\n    hasMore={true}\n    inverse={true}\n    style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n    val={console.log(state.nextURL)}\n    next={LoadMore(state.nextURL)}\n  >\n    <ListLoading isLoading={state.loading} repos={state.repos} />\n  </InfiniteScroll>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}