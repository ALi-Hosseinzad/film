{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null\n  });\n\n  const FetchContent2 = props => {\n    console.log(props.nextURL); // setTimeout(() => {\n\n    if (appState.nextURL === props.nextURL) {\n      console.log(appState.nextURL); //setAppState({ nextURL: props.nextURL });\n    } // }, 1800);\n\n  };\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: appState.repos,\n    next: FetchContent2(appState),\n    hasMore: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    key: appState.nextURL,\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","ListLoading","appState","setAppState","loading","repos","nextURL","FetchContent2","props","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AAEA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC;;AAQA,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACF,OAAlB,EAD+B,CAE/B;;AACE,QAAIJ,QAAQ,CAACI,OAAT,KAAqBE,KAAK,CAACF,OAA/B,EAAwC;AACtCG,MAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACI,OAArB,EADsC,CAEtC;AACD,KAN4B,CAO/B;;AACD,GARD;;AASA,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEJ,QAAQ,CAACG,KADvB;AAEE,IAAA,IAAI,EAAEE,aAAa,CAACL,QAAD,CAFrB;AAGE,IAAA,OAAO,EAAE,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEA,QAAQ,CAACI,OADhB;AAEE,IAAA,SAAS,EAAEJ,QAAQ,CAACE,OAFtB;AAGE,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAgBD,CApCD;;AAqCA,eAAeL,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null,\n  });\n\n \n\n  const FetchContent2 = (props) => {\n    console.log(props.nextURL);\n    // setTimeout(() => {\n      if (appState.nextURL === props.nextURL) {\n        console.log(appState.nextURL);\n        //setAppState({ nextURL: props.nextURL });\n      }\n    // }, 1800);\n  };\n  return (\n    <InfiniteScroll\n      dataLength={appState.repos}\n      next={FetchContent2(appState)}\n      hasMore={true}\n    >\n      {/* {Object.values(appState).map((i, index) => ( */}\n      <ListLoading\n        key={appState.nextURL}\n        isLoading={appState.loading}\n        repos={appState.repos}\n      />\n      {/* ))} */}\n      {}\n    </InfiniteScroll>\n  );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}