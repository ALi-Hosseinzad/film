{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"\"\n  });\n\n  const FetchContent = props => {\n    console.log(props);\n    const apiUrl = `http://api-v2.filmnet.ir`;\n    useEffect(() => {\n      if (appState === \"\") {\n        const url = \"/widgets/home-page?count=5\";\n        setAppState({\n          loading: true\n        });\n        fetch(apiUrl + url).then(res => res.json()).then(repos => {\n          setAppState({\n            loading: false,\n            repos: repos.data,\n            nextURL: repos.meta.next_url\n          });\n          console.log(repos);\n        });\n      } else {}\n    }, [setAppState]);\n  };\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: appState.repos,\n    next: FetchContent(appState.nextURL),\n    hasMore: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","nextURL","FetchContent","props","console","log","apiUrl","url","fetch","then","res","json","data","meta","next_url"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AAEA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC;;AAKA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAMG,MAAM,GAAI,0BAAhB;AACAhB,IAAAA,SAAS,CAAC,MAAM;AACd,UAAGO,QAAQ,KAAK,EAAhB,EAAmB;AACjB,cAAMU,GAAG,GAAE,4BAAX;AACAT,QAAAA,WAAW,CAAC;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAX;AACAS,QAAAA,KAAK,CAACF,MAAM,GAAGC,GAAV,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAEST,KAAD,IAAW;AACfF,UAAAA,WAAW,CAAC;AACVC,YAAAA,OAAO,EAAE,KADC;AAEVC,YAAAA,KAAK,EAAEA,KAAK,CAACY,IAFH;AAGVX,YAAAA,OAAO,EAAED,KAAK,CAACa,IAAN,CAAWC;AAHV,WAAD,CAAX;AAKAV,UAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACD,SATH;AAUD,OAbD,MAaK,CAEJ;AAEF,KAlBQ,EAkBN,CAACF,WAAD,CAlBM,CAAT;AAmBD,GAtBD;;AAuBA,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAED,QAAQ,CAACG,KADvB;AAEE,IAAA,IAAI,EAAEE,YAAY,CAACL,QAAQ,CAACI,OAAV,CAFpB;AAGE,IAAA,OAAO,EAAE,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,WAAD;AACE,IAAA,SAAS,EAAEJ,QAAQ,CAACE,OADtB;AAEE,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AAYD,CA3CD;;AA4CA,eAAeL,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"\",\n  });\n  const FetchContent = (props) => {\n    console.log(props);\n    const apiUrl = `http://api-v2.filmnet.ir`;\n    useEffect(() => {\n      if(appState === \"\"){\n        const url =\"/widgets/home-page?count=5\"\n        setAppState({ loading: true });\n        fetch(apiUrl + url)\n          .then((res) => res.json())\n          .then((repos) => {\n            setAppState({\n              loading: false,\n              repos: repos.data,\n              nextURL: repos.meta.next_url,\n            });\n            console.log(repos);\n          });\n      }else{\n\n      }  \n       \n    }, [setAppState]);\n  };\n  return (\n    <InfiniteScroll\n      dataLength={appState.repos}\n      next={FetchContent(appState.nextURL)}\n      hasMore={true}\n    >\n      <ListLoading\n        isLoading={appState.loading}\n        repos={appState.repos}\n      />\n    </InfiniteScroll>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}