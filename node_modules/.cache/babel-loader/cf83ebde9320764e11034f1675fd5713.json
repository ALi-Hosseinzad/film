{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    url: \"\",\n    items: Array.from({\n      length: 20\n    })\n  });\n  useEffect(url => {\n    setAppState({\n      loading: true\n    });\n    const apiUrl = `http://api-v2.filmnet.ir`;\n    appState.url = `/widgets/home-page?count=5`;\n    fetch(apiUrl + appState.url).then(res => res.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos\n      });\n    });\n  }, [setAppState]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"scrollableDiv\",\n    style: {\n      height: 300,\n      overflow: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: appState.items.length,\n    next: useEffect,\n    hasMore: true,\n    loader: /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, \"Loading...\"),\n    scrollableTarget: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, appstate.items.map((i, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  })))), \";\");\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","ListLoading","appState","setAppState","loading","repos","url","items","Array","from","length","apiUrl","fetch","then","res","json","height","overflow","appstate","map","i","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,GAAG,EAAE,EAHkC;AAIvCC,IAAAA,KAAK,EAAEC,KAAK,CAACC,IAAN,CAAW;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAX;AAJgC,GAAD,CAAxC;AAOAf,EAAAA,SAAS,CACNW,GAAD,IAAS;AACPH,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AACA,UAAMO,MAAM,GAAI,0BAAhB;AACAT,IAAAA,QAAQ,CAACI,GAAT,GAAgB,4BAAhB;AAEAM,IAAAA,KAAK,CAACD,MAAM,GAAGT,QAAQ,CAACI,GAAnB,CAAL,CACGO,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESR,KAAD,IAAW;AACfF,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAAD,CAAX;AACD,KAJH;AAKD,GAXM,EAYP,CAACF,WAAD,CAZO,CAAT;AAcA,sBACE;AAAK,IAAA,EAAE,EAAC,eAAR;AAAwB,IAAA,KAAK,EAAE;AAAEa,MAAAA,MAAM,EAAE,GAAV;AAAeC,MAAAA,QAAQ,EAAE;AAAzB,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEf,QAAQ,CAACK,KAAT,CAAeG,MAD7B;AAEE,IAAA,IAAI,EAAEf,SAFR;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJV;AAKE,IAAA,gBAAgB,EAAC,eALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGuB,QAAQ,CAACX,KAAT,CAAeY,GAAf,CAAmB,CAACC,CAAD,EAAIC,KAAJ,kBAClB;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEnB,QAAQ,CAACE,OAAjC;AAA0C,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,CAPH,CADF,MADF;AAkBD,CAzCD;;AA0CA,eAAeL,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    url: \"\",\n    items: Array.from({ length: 20 }),\n  });\n\n  useEffect(\n    (url) => {\n      setAppState({ loading: true });\n      const apiUrl = `http://api-v2.filmnet.ir`;\n      appState.url = `/widgets/home-page?count=5`;\n\n      fetch(apiUrl + appState.url)\n        .then((res) => res.json())\n        .then((repos) => {\n          setAppState({ loading: false, repos: repos });\n        });\n    },\n    [setAppState]\n  );\n  return (\n    <div id=\"scrollableDiv\" style={{ height: 300, overflow: \"auto\" }}>\n      <InfiniteScroll\n        dataLength={appState.items.length}\n        next={useEffect}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n        scrollableTarget=\"scrollableDiv\"\n      >\n        {appstate.items.map((i, index) => (\n          <div key={index}>\n            <ListLoading isLoading={appState.loading} repos={appState.repos} />\n          </div>\n        ))}\n      </InfiniteScroll>\n      ;\n    </div>\n  );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}