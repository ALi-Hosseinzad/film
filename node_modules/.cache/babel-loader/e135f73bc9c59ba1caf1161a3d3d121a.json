{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null\n  });\n  useEffect(() => {\n    if (setAppState.nextURL) {\n      setAppState({\n        loading: true\n      });\n      fetch(apiUrl + setAppState.nextURL).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url\n        });\n      });\n    } else {\n      setAppState({\n        loading: true\n      });\n      const url = \"/widgets/home-page?count=5\";\n      fetch(apiUrl + url).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url\n        });\n        console.log(repos);\n      });\n    }\n  }, [setAppState]);\n\n  const FetchContent = () => {\n    FetchContent();\n  };\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: appState.repos,\n    next: FetchContent,\n    hasMore: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, appState.repos[0].map(() => /*#__PURE__*/React.createElement(ListLoading, {\n    key: appState.repos[0].id,\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","ListLoading","apiUrl","appState","setAppState","loading","repos","nextURL","fetch","then","res","json","meta","next_url","url","console","log","map","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAMI,MAAM,GAAI,0BAAhB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC;AACvCS,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC;AAMAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,WAAW,CAACG,OAAhB,EAAyB;AACvBH,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACAG,MAAAA,KAAK,CAACN,MAAM,GAAGE,WAAW,CAACG,OAAtB,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESH,KAAD,IAAW;AACfF,QAAAA,WAAW,CAAC;AACVC,UAAAA,OAAO,EAAE,KADC;AAEVC,UAAAA,KAAK,EAAEA,KAFG;AAGVC,UAAAA,OAAO,EAAED,KAAK,CAACM,IAAN,CAAWC;AAHV,SAAD,CAAX;AAKD,OARH;AASD,KAXD,MAWO;AACLT,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACA,YAAMS,GAAG,GAAG,4BAAZ;AACAN,MAAAA,KAAK,CAACN,MAAM,GAAGY,GAAV,CAAL,CACGL,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESH,KAAD,IAAW;AACfF,QAAAA,WAAW,CAAC;AACVC,UAAAA,OAAO,EAAE,KADC;AAEVC,UAAAA,KAAK,EAAEA,KAFG;AAGVC,UAAAA,OAAO,EAAED,KAAK,CAACM,IAAN,CAAWC;AAHV,SAAD,CAAX;AAKAE,QAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACD,OATH;AAUD;AACF,GA1BQ,EA0BN,CAACF,WAAD,CA1BM,CAAT;;AA4BA,QAAMJ,YAAY,GAAG,MAAM;AACzBA,IAAAA,YAAY;AACb,GAFD;;AAIA,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEG,QAAQ,CAACG,KADvB;AAEE,IAAA,IAAI,EAAEN,YAFR;AAGE,IAAA,OAAO,EAAE,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGG,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkBW,GAAlB,CAAsB,mBACrB,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEd,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkBY,EADzB;AAEE,IAAA,SAAS,EAAEf,QAAQ,CAACE,OAFtB;AAGE,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CALH,CADF;AAeD,CAxDD;;AAyDA,eAAeN,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null,\n  });\n\n  useEffect(() => {\n    if (setAppState.nextURL) {\n      setAppState({ loading: true });\n      fetch(apiUrl + setAppState.nextURL)\n        .then((res) => res.json())\n        .then((repos) => {\n          setAppState({\n            loading: false,\n            repos: repos,\n            nextURL: repos.meta.next_url,\n          });\n        });\n    } else {\n      setAppState({ loading: true });\n      const url = \"/widgets/home-page?count=5\";\n      fetch(apiUrl + url)\n        .then((res) => res.json())\n        .then((repos) => {\n          setAppState({\n            loading: false,\n            repos: repos,\n            nextURL: repos.meta.next_url,\n          });\n          console.log(repos);\n        });\n    }\n  }, [setAppState]);\n\n  const FetchContent = () => {\n    FetchContent();\n  };\n\n  return (\n    <InfiniteScroll\n      dataLength={appState.repos}\n      next={FetchContent}\n      hasMore={true}\n    >\n      {appState.repos[0].map(() => (\n        <ListLoading\n          key={appState.repos[0].id}\n          isLoading={appState.loading}\n          repos={appState.repos}\n        />\n      ))}\n    </InfiniteScroll>\n  );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}