{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true\n  });\n  const [page] = useState([]);\n  useEffect(() => {\n    Fetch();\n  }, [page]);\n\n  async function Fetch(nextUrl) {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + nextUrl;\n    setAppState({\n      loading: true\n    });\n    const realPage = page + 1;\n    const resp = await fetch(`${URL}&page=${realPage}`);\n    const repos = await resp.json();\n    setAppState({\n      loading: false,\n      repos: repos,\n      nextURL: repos.meta.next_url\n    });\n\n    if (!repos.meta.next_url) {\n      setAppState({\n        hasMore: false\n      });\n    } // setPage([appState]);\n\n  } // function FetchMore(url) {\n  //   console.log(url);\n  //   //Fetch(url);\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"scrollableDiv\",\n    style: {\n      height: \"auto\",\n      overflow: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: window.length,\n    hasMore: appState.hasMore,\n    inverse: true,\n    scrollableTarget: \"scrollableDiv\",\n    key: cons,\n    next: () => setAppState({\n      nextURL: appState.nextURL\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, page.map((item, index) => /*#__PURE__*/React.createElement(ListLoading, {\n    key: index,\n    isLoading: item.loading,\n    repos: item.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useCallback","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","nextURL","hasMore","page","Fetch","nextUrl","apiUrl","URL","realPage","resp","fetch","json","meta","next_url","height","overflow","window","length","cons","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE,4BAH8B;AAIvCC,IAAAA,OAAO,EAAE;AAJ8B,GAAD,CAAxC;AAMA,QAAM,CAACC,IAAD,IAASZ,QAAQ,CAAC,EAAD,CAAvB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,KAAK;AACN,GAFQ,EAEN,CAACD,IAAD,CAFM,CAAT;;AAIA,iBAAeC,KAAf,CAAqBC,OAArB,EAA8B;AAC5B,UAAMC,MAAM,GAAG,0BAAf;AACA,UAAMC,GAAG,GAAGD,MAAM,GAAGD,OAArB;AACAP,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AACA,UAAMS,QAAQ,GAAGL,IAAI,GAAG,CAAxB;AACA,UAAMM,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,SAAQC,QAAS,EAAzB,CAAxB;AACA,UAAMR,KAAK,GAAG,MAAMS,IAAI,CAACE,IAAL,EAApB;AACAb,IAAAA,WAAW,CAAC;AACVC,MAAAA,OAAO,EAAE,KADC;AAEVC,MAAAA,KAAK,EAAEA,KAFG;AAGVC,MAAAA,OAAO,EAAED,KAAK,CAACY,IAAN,CAAWC;AAHV,KAAD,CAAX;;AAKA,QAAI,CAACb,KAAK,CAACY,IAAN,CAAWC,QAAhB,EAA0B;AACxBf,MAAAA,WAAW,CAAC;AAAEI,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACD,KAd2B,CAe5B;;AACD,GA9ByB,CAgC1B;AACA;AACA;AACA;;;AACA,sBACE;AAAK,IAAA,EAAE,EAAC,eAAR;AAAwB,IAAA,KAAK,EAAE;AAAEY,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEC,MAAM,CAACC,MADrB;AAEE,IAAA,OAAO,EAAEpB,QAAQ,CAACK,OAFpB;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,gBAAgB,EAAC,eAJnB;AAKE,IAAA,GAAG,EAAEgB,IALP;AAME,IAAA,IAAI,EAAE,MAAIpB,WAAW,CAAC;AAACG,MAAAA,OAAO,EAACJ,QAAQ,CAACI;AAAlB,KAAD,CANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGE,IAAI,CAACgB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,kBACR,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEA,KADP;AAEE,IAAA,SAAS,EAAED,IAAI,CAACrB,OAFlB;AAGE,IAAA,KAAK,EAAEqB,IAAI,CAACpB,KAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CARH,CADF,CADF;AAoBD,CAxDD;;AAyDA,eAAeL,aAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true,\n  });\n  const [page] = useState([]);\n\n  useEffect(() => {\n    Fetch();\n  }, [page]);\n\n  async function Fetch(nextUrl) {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + nextUrl;\n    setAppState({ loading: true });\n    const realPage = page + 1;\n    const resp = await fetch(`${URL}&page=${realPage}`);\n    const repos = await resp.json();\n    setAppState({\n      loading: false,\n      repos: repos,\n      nextURL: repos.meta.next_url,\n    });\n    if (!repos.meta.next_url) {\n      setAppState({ hasMore: false });\n    }\n    // setPage([appState]);\n  }\n\n  // function FetchMore(url) {\n  //   console.log(url);\n  //   //Fetch(url);\n  // }\n  return (\n    <div id=\"scrollableDiv\" style={{ height: \"auto\", overflow: \"auto\" }}>\n      <InfiniteScroll\n        dataLength={window.length}\n        hasMore={appState.hasMore}\n        inverse={true}\n        scrollableTarget=\"scrollableDiv\"\n        key={cons}\n        next={()=>setAppState({nextURL:appState.nextURL})}\n      >\n        {page.map((item, index) => (\n          <ListLoading\n            key={index}\n            isLoading={item.loading}\n            repos={item.repos}\n          />\n        ))}\n      </InfiniteScroll>\n    </div>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}