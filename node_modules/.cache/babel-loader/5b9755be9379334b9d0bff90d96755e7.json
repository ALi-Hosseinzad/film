{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null\n  });\n\n  const FetchContent = props => {\n    console.log(props);\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    useEffect(() => {\n      if (appState.nextURL === null) {\n        const url = \"/widgets/home-page?count=5\";\n        setAppState({\n          loading: true\n        });\n        fetch(apiUrl + url).then(res => res.json()).then(repos => {\n          setAppState({\n            loading: false,\n            repos: repos,\n            nextURL: repos.meta.next_url\n          });\n        });\n      } else {\n        setAppState({\n          loading: true\n        });\n        const url = apiUrl + props;\n        console.log(url);\n        fetch(url).then(res => res.json()).then(repos => {\n          setAppState({\n            loading: false,\n            repos: repos,\n            nextURL: repos.meta.next_url\n          });\n        });\n      }\n    }, [setAppState]);\n  };\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: Object.values(appState),\n    next: FetchContent(appState.nextURL),\n    hasMore: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","nextURL","FetchContent","props","console","log","apiUrl","url","fetch","then","res","json","meta","next_url","Object","values"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AAEA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC;;AAKA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,UAAMG,MAAM,GAAG,0BAAf;AACAhB,IAAAA,SAAS,CAAC,MAAM;AACd,UAAGO,QAAQ,CAACI,OAAT,KAAqB,IAAxB,EAA6B;AAC3B,cAAMM,GAAG,GAAE,4BAAX;AACAT,QAAAA,WAAW,CAAC;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAX;AACAS,QAAAA,KAAK,CAACF,MAAM,GAAGC,GAAV,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAEST,KAAD,IAAW;AACfF,UAAAA,WAAW,CAAC;AACVC,YAAAA,OAAO,EAAE,KADC;AAEVC,YAAAA,KAAK,EAAEA,KAFG;AAGVC,YAAAA,OAAO,EAAED,KAAK,CAACY,IAAN,CAAWC;AAHV,WAAD,CAAX;AAKD,SARH;AASD,OAZD,MAaI;AAEFf,QAAAA,WAAW,CAAC;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAX;AACA,cAAMQ,GAAG,GAAGD,MAAM,GAAGH,KAArB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAC,QAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAEST,KAAD,IAAW;AACfF,UAAAA,WAAW,CAAC;AACVC,YAAAA,OAAO,EAAE,KADC;AAEVC,YAAAA,KAAK,EAAEA,KAFG;AAGVC,YAAAA,OAAO,EAAED,KAAK,CAACY,IAAN,CAAWC;AAHV,WAAD,CAAX;AAKD,SARH;AASD;AACF,KA7BQ,EA6BN,CAACf,WAAD,CA7BM,CAAT;AA8BD,GAjCD;;AAkCA,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEgB,MAAM,CAACC,MAAP,CAAclB,QAAd,CADd;AAEE,IAAA,IAAI,EAAEK,YAAY,CAACL,QAAQ,CAACI,OAAV,CAFpB;AAGE,IAAA,OAAO,EAAE,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,WAAD;AACE,IAAA,SAAS,EAAEJ,QAAQ,CAACE,OADtB;AAEE,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAcD,CAxDD;;AAyDA,eAAeL,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null,\n  });\n  const FetchContent = (props) => {\n    console.log(props);\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    useEffect(() => {\n      if(appState.nextURL === null){\n        const url =\"/widgets/home-page?count=5\"\n        setAppState({ loading: true });\n        fetch(apiUrl + url)\n          .then((res) => res.json())\n          .then((repos) => {\n            setAppState({\n              loading: false,\n              repos: repos,\n              nextURL: repos.meta.next_url,\n            });\n          });\n      }\n      else{\n        \n        setAppState({ loading: true });\n        const url = apiUrl + props;\n        console.log(url);\n        fetch(url)\n          .then((res) => res.json())\n          .then((repos) => {\n            setAppState({\n              loading: false,\n              repos: repos,\n              nextURL: repos.meta.next_url,\n            });\n          });\n      }  \n    }, [setAppState]);\n  };\n  return (\n    <InfiniteScroll\n      dataLength={Object.values(appState)}\n      next={FetchContent(appState.nextURL)}\n      hasMore={true}\n    >\n\n      <ListLoading\n        isLoading={appState.loading}\n        repos={appState.repos}\n      />\n      \n    </InfiniteScroll>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}