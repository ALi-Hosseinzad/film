{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/test2.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Slideshow from \"./../slide/slideShow\";\nimport Card from \"./../card/card\";\nimport \"./FetchContent.css\";\nimport NavBar from \"../navBar/navBar\";\n\nconst FetchItems = () => {\n  const apiurl = \"http://api-v2.filmnet.ir/widgets/home-page?offset=\";\n  const ListLoading = ContentLoading(ContentItems);\n  const [state, setState] = useState([]);\n  const [count, setCount] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  useEffect(() => {\n    getData(count);\n  }, [count]);\n\n  function getData(number) {\n    var URL = apiurl + number + \"&count=5\";\n    fetch(URL).then(res => res.json()).then(res => {\n      if (res.meta.next_url && count <= res.meta.total_items_count) {\n        setState(prev => [...prev, res]);\n      } else {\n        setHasMore(false);\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Slideshow, {\n    data: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    className: \"scroll\",\n    dataLength: state.length,\n    next: () => setCount(prevCount => prevCount + 5),\n    hasMore: hasMore,\n    val: console.log(count),\n    loader: /*#__PURE__*/React.createElement(\"p\", {\n      className: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 23\n      }\n    }, \"\\u062F\\u0631\\u06CC\\u0627\\u0641\\u062A \\u0645\\u0648\\u0627\\u0631\\u062F \\u0628\\u06CC\\u0634\\u062A\\u0631 ...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, state.map((item, index) => /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: false,\n    repos: item,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default FetchItems;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/test2.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","Slideshow","Card","NavBar","FetchItems","apiurl","ListLoading","state","setState","count","setCount","hasMore","setHasMore","getData","number","URL","fetch","then","res","json","meta","next_url","total_items_count","prev","classes","root","paper","length","prevCount","console","log","map","item","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Slideshow from \"./../slide/slideShow\";\nimport Card from \"./../card/card\";\nimport \"./FetchContent.css\";\nimport NavBar from \"../navBar/navBar\";\nconst FetchItems = () => {\n  const apiurl = \"http://api-v2.filmnet.ir/widgets/home-page?offset=\";\n  const ListLoading = ContentLoading(ContentItems);\n  const [state, setState] = useState([]);\n  const [count, setCount] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  useEffect(() => {\n    getData(count);\n  }, [count]);\n\n  function getData(number) {\n    var URL = apiurl + number + \"&count=5\";\n    fetch(URL)\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.meta.next_url && count <= res.meta.total_items_count) {\n          setState((prev) => [...prev, res]);\n        } else {\n          setHasMore(false);\n        }\n      });\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Paper className={classes.paper}>\n            <NavBar />\n            <Slideshow data={state} />\n            <Card />\n            <InfiniteScroll\n              className=\"scroll\"\n              dataLength={state.length}\n              next={() => setCount((prevCount) => prevCount + 5)}\n              hasMore={hasMore}\n              val={console.log(count)}\n              loader={<p className=\"loader\">دریافت موارد بیشتر ...</p>}\n            >\n              {state.map((item, index) => (\n                <ListLoading isLoading={false} repos={item} key={index} />\n              ))}\n            </InfiniteScroll>\n            <Footer />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\nexport default FetchItems;\n"]},"metadata":{},"sourceType":"module"}