{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore: true,\n    url: \"\"\n  });\n  useEffect(() => {\n    setAppState({\n      loading: true\n    });\n    const apiUrl = `http://api-v2.filmnet.ir`;\n    const url = `/widgets/home-page?count=5`;\n    fetch(apiUrl + url).then(res => res.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos,\n        ulr: repos.meta.next_url\n      });\n      console.log(repos.meta);\n    });\n  }, [setAppState]);\n\n  const fetchMoreData = () => {};\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: appState.repos,\n    next: appState.repos,\n    hasMore: appState.hasMore,\n    scrollableTarget: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    key: \"111\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }))), \";\");\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","ListLoading","appState","setAppState","loading","repos","hasMore","url","apiUrl","fetch","then","res","json","ulr","meta","next_url","console","log","fetchMoreData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAC,IAH+B;AAIvCC,IAAAA,GAAG,EAAC;AAJmC,GAAD,CAAxC;AAOAZ,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AACA,UAAMI,MAAM,GAAI,0BAAhB;AACA,UAAMD,GAAG,GAAI,4BAAb;AAEAE,IAAAA,KAAK,CAACD,MAAM,GAACD,GAAR,CAAL,CACGG,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESL,KAAD,IAAW;AACfF,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA,KAAzB;AAA+BQ,QAAAA,GAAG,EAACR,KAAK,CAACS,IAAN,CAAWC;AAA9C,OAAD,CAAX;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACS,IAAlB;AACD,KALH;AAMD,GAXQ,EAWN,CAACX,WAAD,CAXM,CAAT;;AAaA,QAAMe,aAAa,GAAG,MAAM,CAE3B,CAFD;;AAIA,sBACE;AAAK,IAAA,EAAE,EAAC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEhB,QAAQ,CAACG,KADvB;AAEE,IAAA,IAAI,EAAEH,QAAQ,CAACG,KAFjB;AAGE,IAAA,OAAO,EAAEH,QAAQ,CAACI,OAHpB;AAIE,IAAA,gBAAgB,EAAC,eAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI;AAAK,IAAA,GAAG,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEJ,QAAQ,CAACE,OAAjC;AAA0C,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAPJ,CADF,MADF;AAiBD,CA3CD;;AA4CA,eAAeL,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore:true,\n    url:\"\"\n  });\n\n  useEffect(() => {\n    setAppState({ loading: true });\n    const apiUrl = `http://api-v2.filmnet.ir`;\n    const url = `/widgets/home-page?count=5`;\n\n    fetch(apiUrl+url)\n      .then((res) => res.json())\n      .then((repos) => {\n        setAppState({ loading: false, repos: repos,ulr:repos.meta.next_url, });\n        console.log(repos.meta);\n      });\n  }, [setAppState]);\n  \n  const fetchMoreData = () => {\n\n  }\n\n  return (\n    <div id=\"scrollableDiv\">\n      <InfiniteScroll\n        dataLength={appState.repos}\n        next={appState.repos}\n        hasMore={appState.hasMore}\n        scrollableTarget=\"scrollableDiv\"\n      >\n        {/* {appState.repos.map((i, index) => ( */}\n          <div key=\"111\">\n            <ListLoading isLoading={appState.loading} repos={appState.repos} />\n          </div>\n        {/* ))} */}\n      </InfiniteScroll>\n      ;\n    </div>\n  );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}