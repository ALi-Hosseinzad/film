{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/test2.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./FetchContent.css\";\n\nconst FetchItems = props => {\n  const apiurl = \"http://api-v2.filmnet.ir/widgets/home-page?offset=\";\n  const ListLoading = ContentLoading(ContentItems);\n  const [state, setState] = useState([]);\n  const [count, setCount] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  useEffect(() => {\n    getData(count);\n  }, [count]);\n\n  function getData(number) {\n    //\n    var URL = apiurl + number + \"&count=5\";\n    fetch(URL).then(res => res.json()).then(res => {\n      if (res.meta.next_url && count <= res.meta.total_items_count) {\n        setState(prev => [...prev, res]);\n      } else {\n        setHasMore(false);\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    className: \"scroll\",\n    dataLength: state.length // next={setCount(count+5)}\n    ,\n    hasMore: hasMore,\n    val: console.log(count),\n    loader: /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    }, \"\\u062F\\u0631\\u06CC\\u0627\\u0641\\u062A \\u0645\\u0648\\u0627\\u0631\\u062F \\u0628\\u06CC\\u0634\\u062A\\u0631 ...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, state.map((item, index) => /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: false,\n    repos: item,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default FetchItems;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/test2.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchItems","props","apiurl","ListLoading","state","setState","count","setCount","hasMore","setHasMore","getData","number","URL","fetch","then","res","json","meta","next_url","total_items_count","prev","length","console","log","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,OAAO,oBAAP;;AACA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAMC,MAAM,GAAG,oDAAf;AACA,QAAMC,WAAW,GAAGN,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,OAAO,CAACJ,KAAD,CAAP;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAIA,WAASI,OAAT,CAAiBC,MAAjB,EAAyB;AACvB;AACA,QAAIC,GAAG,GAAGV,MAAM,GAAGS,MAAT,GAAkB,UAA5B;AACAE,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAAS;AACb,UAAIA,GAAG,CAACE,IAAJ,CAASC,QAAT,IAAqBZ,KAAK,IAAGS,GAAG,CAACE,IAAJ,CAASE,iBAA1C,EAA6D;AAC3Dd,QAAAA,QAAQ,CAAEe,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUL,GAAV,CAAX,CAAR;AACD,OAFD,MAEO;AACLN,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KARH;AASD;;AAED,sBACE,oBAAC,cAAD;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,UAAU,EAAEL,KAAK,CAACiB,MAFpB,CAGC;AAHD;AAIE,IAAA,OAAO,EAAEb,OAJX;AAKG,IAAA,GAAG,EAAEc,OAAO,CAACC,GAAR,CAAYjB,KAAZ,CALR;AAME,IAAA,MAAM,eAAE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gHANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGF,KAAK,CAACoB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACX,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAE,KAAxB;AAA+B,IAAA,KAAK,EAAED,IAAtC;AAA4C,IAAA,GAAG,EAAEC,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CARH,CADF;AAcD,CAtCD;;AAuCA,eAAe1B,UAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./FetchContent.css\"\nconst FetchItems = (props) => {\n  const apiurl = \"http://api-v2.filmnet.ir/widgets/home-page?offset=\";\n  const ListLoading = ContentLoading(ContentItems);\n  const [state, setState] = useState([]);\n  const [count, setCount] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  useEffect(() => {\n    getData(count);\n  }, [count]);\n\n  function getData(number) {\n    //\n    var URL = apiurl + number + \"&count=5\";\n    fetch(URL)\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.meta.next_url && count<= res.meta.total_items_count) {\n          setState((prev) => [...prev, res]);\n        } else {\n          setHasMore(false);\n        }\n      });\n  }\n  \n  return (\n    <InfiniteScroll\n      className=\"scroll\"\n      dataLength={state.length}\n     // next={setCount(count+5)}\n      hasMore={hasMore}\n       val={console.log(count)}\n      loader={<h4 className=\"loader\">دریافت موارد بیشتر ...</h4>}\n    >\n      {state.map((item, index) => (\n      <ListLoading isLoading={false} repos={item} key={index}/>\n      ))}\n    </InfiniteScroll>\n  );\n};\nexport default FetchItems;\n"]},"metadata":{},"sourceType":"module"}