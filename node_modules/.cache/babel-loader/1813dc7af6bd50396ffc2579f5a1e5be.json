{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState([]);\n  const [page] = useState([]);\n  const [next, setNext] = useState([]);\n  const pageURL = \"/widgets/home-page?count=5\";\n\n  async function Fetch() {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + appState.nextURL;\n    console.log(URL);\n    setAppState({\n      loading: true\n    });\n    const realPage = page + 1;\n    const resp = await fetch(`${URL}&page=${realPage}`);\n    const repos = await resp.json();\n    setAppState({\n      loading: false,\n      repos: repos\n    });\n    setNext(prev => [...prev, repos.meta.next_url]);\n\n    if (!repos.meta.next_url) {\n      setAppState({\n        hasMore: false\n      });\n    }\n  }\n\n  useEffect(() => {\n    Fetch(pageURL);\n  }, [page]);\n\n  function FetchMore(props, prevPrpos) {\n    useEffect(() => {\n      Fetch(pageURL);\n      props.map((item, index) => {\n        prevPrpos.map(val => {\n          if (item.meta.next_url === val) {\n            console.log(val);\n            Fetch(val);\n          }\n        });\n      });\n    }, [page]);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"scrollableDiv\",\n    style: {\n      height: \"auto\",\n      overflow: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: window.length,\n    hasMore: false,\n    inverse: true,\n    scrollableTarget: \"scrollableDiv\" //key={console.log(appState.repos.meta)}\n    ,\n    next: FetchMore(appState, next),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, page.map((item, index) => /*#__PURE__*/React.createElement(ListLoading, {\n    key: index,\n    isLoading: false,\n    repos: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useCallback","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","page","next","setNext","pageURL","Fetch","apiUrl","URL","nextURL","console","log","loading","realPage","resp","fetch","repos","json","prev","meta","next_url","hasMore","FetchMore","props","prevPrpos","map","item","index","val","height","overflow","window","length"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState([]);\n  const [page] = useState([]);\n  const [next, setNext] = useState([]);\n  const pageURL = \"/widgets/home-page?count=5\";\n\n  async function Fetch() {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + appState.nextURL;\n    console.log(URL);\n    setAppState({ loading: true });\n    const realPage = page + 1;\n    const resp = await fetch(`${URL}&page=${realPage}`);\n    const repos = await resp.json();\n    setAppState({\n      loading: false,\n      repos: repos,\n    });\n    setNext((prev) => [...prev, repos.meta.next_url]);\n    if (!repos.meta.next_url) {\n      setAppState({ hasMore: false });\n    }\n  }\n  useEffect(() => {\n    Fetch(pageURL);\n  }, [page]);\n  function FetchMore(props, prevPrpos) {\n    useEffect(() => {\n      Fetch(pageURL);\n      props.map((item, index) => {\n        prevPrpos.map((val) => {\n          if (item.meta.next_url === val) {\n            console.log(val);\n            Fetch(val);\n          }\n        });\n      });\n    }, [page]);\n  }\n  return (\n    <div id=\"scrollableDiv\" style={{ height: \"auto\", overflow: \"auto\" }}>\n      <InfiniteScroll\n        dataLength={window.length}\n        hasMore={false}\n        inverse={true}\n        scrollableTarget=\"scrollableDiv\"\n        //key={console.log(appState.repos.meta)}\n        next={FetchMore(appState, next)}\n      >\n        {page.map((item, index) => (\n          <ListLoading key={index} isLoading={false} repos={item} />\n        ))}\n      </InfiniteScroll>\n    </div>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}