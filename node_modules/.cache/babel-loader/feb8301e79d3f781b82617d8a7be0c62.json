{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/test2.jsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true\n  });\n  const [page, setPage] = useState([]);\n\n  function Fetch(nextUrl) {\n    (async () => {\n      const apiUrl = \"http://api-v2.filmnet.ir\";\n      const URL = apiUrl + nextUrl;\n      setAppState({\n        loading: true\n      });\n      const realPage = page + 1;\n      const resp = await fetch(`${URL}&page=${realPage}`);\n      const repos = await resp.json();\n      setAppState({\n        loading: false,\n        repos: repos,\n        nextURL: repos.meta.next_url\n      });\n\n      if (!repos.meta.next_url) {\n        setAppState({\n          hasMore: false\n        });\n      }\n\n      setPage([repos]);\n    })();\n  }\n\n  ;\n  useEffect(() => {\n    Fetch(appState.nextURL);\n  }, [page]);\n  const onLoadMore = useCallback(url => {// Fetch(url);\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"scrollableDiv\",\n    style: {\n      height: \"auto\",\n      overflow: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: window.length,\n    hasMore: appState.hasMore,\n    inverse: true,\n    scrollableTarget: \"scrollableDiv\",\n    key: console.log(appState.nextURL) // next={onLoadMore(appState.nextURL)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, page.map((item, index) => /*#__PURE__*/React.createElement(ListLoading // key={console.log(page)}\n  , {\n    isLoading: false,\n    repos: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/test2.jsx"],"names":["React","useCallback","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","nextURL","hasMore","page","setPage","Fetch","nextUrl","apiUrl","URL","realPage","resp","fetch","json","meta","next_url","onLoadMore","url","height","overflow","window","length","console","log","map","item","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE,4BAH8B;AAIvCC,IAAAA,OAAO,EAAE;AAJ8B,GAAD,CAAxC;AAMA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;;AAEA,WAASc,KAAT,CAAgBC,OAAhB,EAAyB;AACvB,KAAC,YAAY;AACX,YAAMC,MAAM,GAAG,0BAAf;AACA,YAAMC,GAAG,GAAGD,MAAM,GAAGD,OAArB;AACAR,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACA,YAAMU,QAAQ,GAAGN,IAAI,GAAG,CAAxB;AACA,YAAMO,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAEH,GAAI,SAAQC,QAAS,EAAzB,CAAxB;AACA,YAAMT,KAAK,GAAG,MAAMU,IAAI,CAACE,IAAL,EAApB;AACAd,MAAAA,WAAW,CAAC;AACVC,QAAAA,OAAO,EAAE,KADC;AAEVC,QAAAA,KAAK,EAAEA,KAFG;AAGVC,QAAAA,OAAO,EAAED,KAAK,CAACa,IAAN,CAAWC;AAHV,OAAD,CAAX;;AAKA,UAAI,CAACd,KAAK,CAACa,IAAN,CAAWC,QAAhB,EAA0B;AACxBhB,QAAAA,WAAW,CAAC;AAAEI,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAX;AACD;;AACDE,MAAAA,OAAO,CAAC,CAACJ,KAAD,CAAD,CAAP;AACD,KAhBD;AAiBD;;AAAA;AACDV,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,KAAK,CAACR,QAAQ,CAACI,OAAV,CAAL;AACD,GAFQ,EAEN,CAACE,IAAD,CAFM,CAAT;AAIA,QAAMY,UAAU,GAAG1B,WAAW,CAAE2B,GAAD,IAAS,CACtC;AACD,GAF6B,CAA9B;AAIA,sBACE;AAAK,IAAA,EAAE,EAAC,eAAR;AAAwB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEC,MAAM,CAACC,MADrB;AAEE,IAAA,OAAO,EAAEvB,QAAQ,CAACK,OAFpB;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,gBAAgB,EAAC,eAJnB;AAKE,IAAA,GAAG,EAAEmB,OAAO,CAACC,GAAR,CAAYzB,QAAQ,CAACI,OAArB,CALP,CAME;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGE,IAAI,CAACoB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,kBACV,oBAAC,WAAD,CACE;AADF;AAEE,IAAA,SAAS,EAAE,KAFb;AAGE,IAAA,KAAK,EAAED,IAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CARH,CADF,CADF;AAoBD,CAzDD;;AA0DA,eAAe7B,aAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true,\n  });\n  const [page, setPage] = useState([]);\n\n  function Fetch (nextUrl) {\n    (async () => {\n      const apiUrl = \"http://api-v2.filmnet.ir\";\n      const URL = apiUrl + nextUrl;\n      setAppState({ loading: true });\n      const realPage = page + 1;\n      const resp = await fetch(`${URL}&page=${realPage}`);\n      const repos = await resp.json();\n      setAppState({\n        loading: false,\n        repos: repos,\n        nextURL: repos.meta.next_url,\n      });\n      if (!repos.meta.next_url) {\n        setAppState({ hasMore: false });\n      }\n      setPage([repos]);\n    })();\n  };\n  useEffect(() => {\n    Fetch(appState.nextURL);\n  }, [page]);\n\n  const onLoadMore = useCallback((url) => {\n    // Fetch(url);\n  });\n\n  return (\n    <div id=\"scrollableDiv\" style={{ height: \"auto\", overflow: \"auto\" }}>\n      <InfiniteScroll\n        dataLength={window.length}\n        hasMore={appState.hasMore}\n        inverse={true}\n        scrollableTarget=\"scrollableDiv\"\n        key={console.log(appState.nextURL)}\n        // next={onLoadMore(appState.nextURL)}\n      >\n        {page.map((item, index) => (\n        <ListLoading\n          // key={console.log(page)}\n          isLoading={false}\n          repos={item}\n        />\n        ))}\n      </InfiniteScroll>\n    </div>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}