{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true\n  });\n  const [page, setPage] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null\n  });\n\n  function Fetch(x) {\n    useEffect(() => {\n      FetchContent(x);\n    }, [setPage, setAppState]);\n  }\n\n  function FetchContent(nextUrl) {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + nextUrl;\n    setAppState({\n      loading: true\n    });\n    fetch(URL).then(res => res.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos,\n        nextURL: repos.meta.next_url\n      });\n      setPage({\n        loading: false,\n        repos: repos,\n        nextURL: repos.meta.next_url\n      });\n\n      if (!repos.meta.next_url) {\n        setAppState({\n          hasMore: false\n        });\n      }\n    });\n  }\n\n  function FetchMore(start) {\n    Fetch(s);\n  } // function getUrl(url, url2) {\n  //   if(url===url2){\n  //     // console.log(url);\n  //     return url;\n  //   }\n  // }\n\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: 20,\n    hasMore: true,\n    inverse: true,\n    style: {\n      display: \"flex\",\n      flexDirection: \"column-reverse\"\n    },\n    next: FetchMore(appState.nextURL),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    key: console.log(appState),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","nextURL","hasMore","page","setPage","Fetch","x","FetchContent","nextUrl","apiUrl","URL","fetch","then","res","json","meta","next_url","FetchMore","start","s","display","flexDirection","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAE1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE,4BAH8B;AAIvCC,IAAAA,OAAO,EAAE;AAJ8B,GAAD,CAAxC;AAMA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC;AAC/BQ,IAAAA,OAAO,EAAE,KADsB;AAE/BC,IAAAA,KAAK,EAAE,IAFwB;AAG/BC,IAAAA,OAAO,EAAE;AAHsB,GAAD,CAAhC;;AAKA,WAASI,KAAT,CAAeC,CAAf,EAAkB;AAChBhB,IAAAA,SAAS,CAAC,MAAM;AACdiB,MAAAA,YAAY,CAACD,CAAD,CAAZ;AACD,KAFQ,EAEN,CAACF,OAAD,EAAUN,WAAV,CAFM,CAAT;AAGD;;AAED,WAASS,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,UAAMC,MAAM,GAAG,0BAAf;AACA,UAAMC,GAAG,GAAGD,MAAM,GAAGD,OAArB;AACAV,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AACAY,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESZ,KAAD,IAAW;AACfF,MAAAA,WAAW,CAAC;AACVC,QAAAA,OAAO,EAAE,KADC;AAEVC,QAAAA,KAAK,EAAEA,KAFG;AAGVC,QAAAA,OAAO,EAAED,KAAK,CAACe,IAAN,CAAWC;AAHV,OAAD,CAAX;AAKAZ,MAAAA,OAAO,CAAC;AACNL,QAAAA,OAAO,EAAE,KADH;AAENC,QAAAA,KAAK,EAAEA,KAFD;AAGNC,QAAAA,OAAO,EAAED,KAAK,CAACe,IAAN,CAAWC;AAHd,OAAD,CAAP;;AAKA,UAAI,CAAChB,KAAK,CAACe,IAAN,CAAWC,QAAhB,EAA0B;AACxBlB,QAAAA,WAAW,CAAC;AAAEI,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAX;AACD;AACF,KAhBH;AAiBD;;AACD,WAASe,SAAT,CAAoBC,KAApB,EAA0B;AAEzBb,IAAAA,KAAK,CAACc,CAAD,CAAL;AACA,GA7CyB,CA8C1B;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAE,EADd;AAEE,IAAA,OAAO,EAAE,IAFX;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,aAAa,EAAE;AAAlC,KAJT;AAKE,IAAA,IAAI,EAAEJ,SAAS,CAACpB,QAAQ,CAACI,OAAV,CALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEJ,QAAQ,CAACE,OAAjC;AAA0C,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAA1D;AAAiE,IAAA,GAAG,EAAEsB,OAAO,CAACC,GAAR,CAAY1B,QAAZ,CAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAaD,CAjED;;AAkEA,eAAeF,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true,\n  });\n  const [page, setPage] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null,\n  });\n  function Fetch(x) {\n    useEffect(() => {\n      FetchContent(x);\n    }, [setPage, setAppState]);\n  }\n\n  function FetchContent(nextUrl) {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + nextUrl;\n    setAppState({ loading: true });\n    fetch(URL)\n      .then((res) => res.json())\n      .then((repos) => {\n        setAppState({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url,\n        });\n        setPage({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url,\n        });\n        if (!repos.meta.next_url) {\n          setAppState({ hasMore: false });\n        }\n      });\n  }\n  function FetchMore (start){\n\n   Fetch(s)\n  }\n  // function getUrl(url, url2) {\n  //   if(url===url2){\n  //     // console.log(url);\n  //     return url;\n  //   }\n  // }\n  return (\n    <InfiniteScroll\n      dataLength={20}\n      hasMore={true}\n      inverse={true}\n      style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n      next={FetchMore(appState.nextURL)}\n    >\n    {}\n      <ListLoading isLoading={appState.loading} repos={appState.repos} key={console.log(appState)}/>\n    </InfiniteScroll>\n  );\n  \n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}