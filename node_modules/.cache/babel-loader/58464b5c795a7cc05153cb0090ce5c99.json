{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null\n  });\n  useEffect(() => {\n    FetchContent();\n  }, []);\n\n  function FetchContent(nextUrl) {\n    // console.log(nextUrl);\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n\n    if (appState.nextURL === null) {\n      const url = \"/widgets/home-page?count=5\";\n      setAppState({\n        loading: true\n      });\n      fetch(apiUrl + url).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url\n        });\n      });\n    } else {\n      setAppState({\n        loading: true\n      });\n      console.log(appState.nextURL);\n      const url = apiUrl + appState.nextURL;\n      console.log(url);\n      fetch(url).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url\n        });\n      });\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: Object.values(appState),\n    next: FetchContent(appState.nextURL),\n    hasMore: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","nextURL","FetchContent","nextUrl","apiUrl","url","fetch","then","res","json","meta","next_url","console","log","Object","values"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT;;AAGA,WAASA,YAAT,CAAwBC,OAAxB,EAAiC;AAC/B;AACA,UAAMC,MAAM,GAAG,0BAAf;;AAEE,QAAGP,QAAQ,CAACI,OAAT,KAAqB,IAAxB,EAA6B;AAC3B,YAAMI,GAAG,GAAE,4BAAX;AACAP,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACAO,MAAAA,KAAK,CAACF,MAAM,GAAGC,GAAV,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESP,KAAD,IAAW;AACfF,QAAAA,WAAW,CAAC;AACVC,UAAAA,OAAO,EAAE,KADC;AAEVC,UAAAA,KAAK,EAAEA,KAFG;AAGVC,UAAAA,OAAO,EAAED,KAAK,CAACU,IAAN,CAAWC;AAHV,SAAD,CAAX;AAKD,OARH;AASD,KAZD,MAaE;AACAb,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACI,OAArB;AACA,YAAMI,GAAG,GAAGD,MAAM,GAAGP,QAAQ,CAACI,OAA9B;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACAC,MAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESP,KAAD,IAAW;AACfF,QAAAA,WAAW,CAAC;AACVC,UAAAA,OAAO,EAAE,KADC;AAEVC,UAAAA,KAAK,EAAEA,KAFG;AAGVC,UAAAA,OAAO,EAAED,KAAK,CAACU,IAAN,CAAWC;AAHV,SAAD,CAAX;AAKD,OARH;AASC;AACN;;AAAA;AACD,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEG,MAAM,CAACC,MAAP,CAAclB,QAAd,CADd;AAEE,IAAA,IAAI,EAAEK,YAAY,CAACL,QAAQ,CAACI,OAAV,CAFpB;AAGE,IAAA,OAAO,EAAE,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,WAAD;AACE,IAAA,SAAS,EAAEJ,QAAQ,CAACE,OADtB;AAEE,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAcD,CAzDD;;AA0DA,eAAeL,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null,\n  });\n  useEffect(() => {\n    FetchContent();\n  }, []);\n  function FetchContent  (nextUrl) {\n    // console.log(nextUrl);\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    \n      if(appState.nextURL === null){\n        const url =\"/widgets/home-page?count=5\"\n        setAppState({ loading: true });\n        fetch(apiUrl + url)\n          .then((res) => res.json())\n          .then((repos) => {\n            setAppState({\n              loading: false,\n              repos: repos,\n              nextURL: repos.meta.next_url,\n            });\n          });\n      }\n    else{\n        setAppState({ loading: true });\n        console.log(appState.nextURL);\n        const url = apiUrl + appState.nextURL;\n        console.log(url);\n        fetch(url)\n          .then((res) => res.json())\n          .then((repos) => {\n            setAppState({\n              loading: false,\n              repos: repos,\n              nextURL: repos.meta.next_url,\n            });\n          });  \n        }\n  };\n  return (\n    <InfiniteScroll\n      dataLength={Object.values(appState)}\n      next={FetchContent(appState.nextURL)}\n      hasMore={true}\n    >\n\n      <ListLoading\n        isLoading={appState.loading}\n        repos={appState.repos}\n      />\n      \n    </InfiniteScroll>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}