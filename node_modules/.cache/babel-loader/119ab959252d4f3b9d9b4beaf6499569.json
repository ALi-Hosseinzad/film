{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null\n  });\n\n  const FetchContent2 = props => {\n    console.log(object);\n    useEffect(() => {\n      const apiUrl = `http://api-v2.filmnet.ir`;\n\n      if (props.nextURL) {\n        setAppState({\n          loading: true\n        });\n        fetch(apiUrl + appState.nextURL).then(res => res.json()).then(repos => {\n          setAppState({\n            loading: false,\n            repos: repos.data,\n            nextURL: repos.meta.next_url\n          });\n        });\n      } else {\n        setAppState({\n          loading: true\n        });\n        const url = \"/widgets/home-page?count=5\";\n        fetch(apiUrl + url).then(res => res.json()).then(repos => {\n          setAppState({\n            loading: false,\n            repos: Object.values(repos),\n            nextURL: repos.meta.next_url\n          });\n        });\n      }\n    }, [setAppState]);\n  };\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: appState.repos,\n    next: FetchContent2(appState.nextURL),\n    hasMore: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    key: appState.nextURL,\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","ListLoading","appState","setAppState","loading","repos","nextURL","FetchContent2","props","console","log","object","apiUrl","fetch","then","res","json","data","meta","next_url","url","Object","values"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AAEA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC;;AAKA,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACAhB,IAAAA,SAAS,CAAC,MAAM;AACd,YAAMiB,MAAM,GAAI,0BAAhB;;AACA,UAAIJ,KAAK,CAACF,OAAV,EAAmB;AACjBH,QAAAA,WAAW,CAAC;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAX;AACAS,QAAAA,KAAK,CAACD,MAAM,GAAGV,QAAQ,CAACI,OAAnB,CAAL,CACGQ,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAEST,KAAD,IAAW;AACfF,UAAAA,WAAW,CAAC;AACVC,YAAAA,OAAO,EAAE,KADC;AAEVC,YAAAA,KAAK,EAAEA,KAAK,CAACY,IAFH;AAGVX,YAAAA,OAAO,EAAED,KAAK,CAACa,IAAN,CAAWC;AAHV,WAAD,CAAX;AAKD,SARH;AASD,OAXD,MAWO;AACLhB,QAAAA,WAAW,CAAC;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAX;AACA,cAAMgB,GAAG,GAAG,4BAAZ;AACAP,QAAAA,KAAK,CAACD,MAAM,GAAGQ,GAAV,CAAL,CACGN,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAEST,KAAD,IAAW;AACfF,UAAAA,WAAW,CAAC;AACVC,YAAAA,OAAO,EAAE,KADC;AAEVC,YAAAA,KAAK,EAAEgB,MAAM,CAACC,MAAP,CAAcjB,KAAd,CAFG;AAGVC,YAAAA,OAAO,EAAED,KAAK,CAACa,IAAN,CAAWC;AAHV,WAAD,CAAX;AAKD,SARH;AASD;AACF,KA1BQ,EA0BN,CAAChB,WAAD,CA1BM,CAAT;AA2BD,GA7BD;;AA8BA,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAED,QAAQ,CAACG,KADvB;AAEE,IAAA,IAAI,EAAEE,aAAa,CAACL,QAAQ,CAACI,OAAV,CAFrB;AAGE,IAAA,OAAO,EAAE,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEJ,QAAQ,CAACI,OADhB;AAEE,IAAA,SAAS,EAAEJ,QAAQ,CAACE,OAFtB;AAGE,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AAaD,CAnDD;;AAoDA,eAAeL,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null,\n  });\n  const FetchContent2 = (props) => {\n    console.log(object);\n    useEffect(() => {\n      const apiUrl = `http://api-v2.filmnet.ir`;\n      if (props.nextURL) {\n        setAppState({ loading: true });\n        fetch(apiUrl + appState.nextURL)\n          .then((res) => res.json())\n          .then((repos) => {\n            setAppState({\n              loading: false,\n              repos: repos.data,\n              nextURL: repos.meta.next_url,\n            });\n          });\n      } else {\n        setAppState({ loading: true });\n        const url = \"/widgets/home-page?count=5\";\n        fetch(apiUrl + url)\n          .then((res) => res.json())\n          .then((repos) => {\n            setAppState({\n              loading: false,\n              repos: Object.values(repos),\n              nextURL: repos.meta.next_url,\n            });\n          });\n      }\n    }, [setAppState]);\n  };\n  return (\n    <InfiniteScroll\n      dataLength={appState.repos}\n      next={FetchContent2(appState.nextURL)}\n      hasMore={true}\n    >\n      <ListLoading\n        key={appState.nextURL}\n        isLoading={appState.loading}\n        repos={appState.repos}\n      />\n    </InfiniteScroll>\n  );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}