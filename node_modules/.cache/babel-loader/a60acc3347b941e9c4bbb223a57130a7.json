{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore: false,\n    url: null\n  });\n  const [moreState, setMoreState] = useState({\n    loading: false,\n    repos: null,\n    url: null\n  });\n\n  const fetch = () => {\n    setAppState({\n      loading: true\n    });\n    const url = \"/widgets/home-page?count=5\";\n    fetch(apiUrl + url).then(res => res.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos,\n        url: repos.meta.next_ur\n      });\n    });\n  };\n\n  const fetch2 = url => {\n    console.log(url);\n    fetch(apiUrl + moreState.url).then(res => res.json()).then(data => {\n      setMoreState({\n        loading: false,\n        data: data\n      });\n      console.log(data);\n    });\n  };\n\n  useEffect(() => {});\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: moreState.loading,\n    repos: moreState.data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","ListLoading","apiUrl","appState","setAppState","loading","repos","hasMore","url","moreState","setMoreState","fetch","then","res","json","meta","next_ur","fetch2","console","log","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAMI,MAAM,GAAI,0BAAhB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC;AACvCS,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE,KAH8B;AAIvCC,IAAAA,GAAG,EAAE;AAJkC,GAAD,CAAxC;AAMA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC;AACzCS,IAAAA,OAAO,EAAE,KADgC;AAEzCC,IAAAA,KAAK,EAAE,IAFkC;AAGzCE,IAAAA,GAAG,EAAC;AAHqC,GAAD,CAA1C;;AAKA,QAAMG,KAAK,GAAG,MAAI;AAChBP,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AACA,UAAMG,GAAG,GAAC,4BAAV;AACAG,IAAAA,KAAK,CAACT,MAAM,GAAEM,GAAT,CAAL,CACGI,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESN,KAAD,IAAW;AACfF,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA,KAAzB;AAA+BE,QAAAA,GAAG,EAAEF,KAAK,CAACS,IAAN,CAAWC;AAA/C,OAAD,CAAX;AACD,KAJH;AAKD,GARD;;AASF,QAAMC,MAAM,GAAIT,GAAD,IAAO;AAElBU,IAAAA,OAAO,CAACC,GAAR,CAAYX,GAAZ;AACAG,IAAAA,KAAK,CAACT,MAAM,GAAGO,SAAS,CAACD,GAApB,CAAL,CACCI,IADD,CACOC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADf,EAECF,IAFD,CAEOQ,IAAD,IAAU;AACdV,MAAAA,YAAY,CAAC;AACXL,QAAAA,OAAO,EAAE,KADE;AAEXe,QAAAA,IAAI,EAAEA;AAFK,OAAD,CAAZ;AAIAF,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACD,KARD;AASH,GAZD;;AAaAzB,EAAAA,SAAS,CAAC,MAAM,CAAE,CAAT,CAAT;AACE,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEQ,QAAQ,CAACE,OAAjC;AAA0C,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEG,SAAS,CAACJ,OAAlC;AAA2C,IAAA,KAAK,EAAEI,SAAS,CAACW,IAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CA5CD;;AA6CA,eAAepB,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore: false,\n    url: null,\n  });\n  const [moreState, setMoreState] = useState({\n    loading: false,\n    repos: null,\n    url:null\n  });\n  const fetch = ()=>{\n    setAppState({ loading: true });\n    const url=\"/widgets/home-page?count=5\";\n    fetch(apiUrl +url)\n      .then((res) => res.json())\n      .then((repos) => {\n        setAppState({ loading: false, repos: repos,url: repos.meta.next_ur});\n      })\n  }\nconst fetch2 = (url)=>{\n \n    console.log(url);\n    fetch(apiUrl + moreState.url)\n    .then((res) => res.json())\n    .then((data) => {\n      setMoreState({\n        loading: false,\n        data: data,\n      });\n      console.log(data);\n    });\n}\nuseEffect(() => {},);\n  return (\n    <div>\n      <ListLoading isLoading={appState.loading} repos={appState.repos} />\n      {/* {fetchMore} */}\n      <ListLoading isLoading={moreState.loading} repos={moreState.data} />\n    </div>\n  );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}