{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst FetchContent = url => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null\n  });\n\n  const FetchContent = () => {\n    console.log(url);\n    useEffect(() => {\n      setAppState({\n        loading: true\n      });\n      fetch(apiUrl + url).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos\n        });\n      });\n    }, [setAppState]);\n  };\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: a7.length,\n    next: FetchContent,\n    hasMore: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, val.map(() => /*#__PURE__*/React.createElement(ListLoading, {\n    key: appState.repos[0].id,\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","url","ListLoading","apiUrl","appState","setAppState","loading","repos","nextURL","console","log","fetch","then","res","json","a7","length","val","map","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,MAAMC,YAAY,GAAIC,GAAD,IAAS;AAC5B,QAAMC,WAAW,GAAGL,cAAc,CAACC,YAAD,CAAlC;AACA,QAAMK,MAAM,GAAI,0BAAhB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC;AACvCU,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAC;AAH+B,GAAD,CAAxC;;AAKA,QAAMR,YAAY,GAAG,MAAM;AACzBS,IAAAA,OAAO,CAACC,GAAR,CAAYT,GAAZ;AACAN,IAAAA,SAAS,CAAC,MAAM;AACdU,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACAK,MAAAA,KAAK,CAACR,MAAM,GAAGF,GAAV,CAAL,CACGW,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESL,KAAD,IAAW;AACfF,QAAAA,WAAW,CAAC;AAAEC,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,KAAK,EAAEA;AAAzB,SAAD,CAAX;AACD,OAJH;AAKD,KAPQ,EAON,CAACF,WAAD,CAPM,CAAT;AASD,GAXD;;AAaA,sBACE,oBAAC,cAAD;AACA,IAAA,UAAU,EAAEU,EAAE,CACbC,MAFD;AAGA,IAAA,IAAI,EAAEhB,YAHN;AAIA,IAAA,OAAO,EAAE,IAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMCiB,GAAG,CAACC,GAAJ,CAAQ,mBACP,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEd,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkBY,EADzB;AAEE,IAAA,SAAS,EAAEf,QAAQ,CAACE,OAFtB;AAGE,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAND,CADF;AAgBD,CArCD;;AAsCA,eAAeP,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst FetchContent = (url) => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL:null\n  });\n  const FetchContent = () => {\n    console.log(url);\n    useEffect(() => {\n      setAppState({ loading: true });\n      fetch(apiUrl + url)\n        .then((res) => res.json())\n        .then((repos) => {\n          setAppState({ loading: false, repos: repos });\n        });\n    }, [setAppState]);\n   \n  };\n\n  return (\n    <InfiniteScroll\n    dataLength={a7\n    .length}\n    next={FetchContent}\n    hasMore={true}\n  >\n    {val.map(() => (\n      <ListLoading\n        key={appState.repos[0].id}\n        isLoading={appState.loading}\n        repos={appState.repos}\n      />\n    ))}\n  </InfiniteScroll>\n  );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}