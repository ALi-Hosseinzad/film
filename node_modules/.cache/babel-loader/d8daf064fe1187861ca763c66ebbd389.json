{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    url: \"\"\n  });\n  useEffect(url => {\n    setAppState({\n      loading: true\n    });\n    const apiUrl = `http://api-v2.filmnet.ir`;\n    appState.url = `/widgets/home-page?count=5`;\n    fetch(apiUrl + appState.url).then(res => res.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos\n      });\n    });\n  }, [setAppState]);\n  return;\n\n  /*#__PURE__*/\n  React.createElement(InfiniteScroll, {\n    dataLength: this.state.items.length,\n    next: this.fetchMoreData,\n    hasMore: true,\n    loader: /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, \"Loading...\"),\n    scrollableTarget: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }\n  }, this.state.items.map((i, index) => /*#__PURE__*/React.createElement(\"div\", {\n    style: style,\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, \"div - #\", index)));\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","FetchContent","ListLoading","appState","setAppState","loading","repos","url","apiUrl","fetch","then","res","json","state","items","length","fetchMoreData","map","i","index","style"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,YAAY,GAAE,MAAM;AACxB,QAAMC,WAAW,GAAGH,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC;AACvCO,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,GAAG,EAAC;AAHmC,GAAD,CAAxC;AAMAV,EAAAA,SAAS,CAAEU,GAAD,IAAS;AAEjBH,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AACA,UAAMG,MAAM,GAAI,0BAAhB;AACAL,IAAAA,QAAQ,CAACI,GAAT,GAAiB,4BAAjB;AAEAE,IAAAA,KAAK,CAACD,MAAM,GAACL,QAAQ,CAACI,GAAjB,CAAL,CACGG,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESJ,KAAD,IAAW;AACfF,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAAD,CAAX;AACD,KAJH;AAKD,GAXQ,EAWN,CAACF,WAAD,CAXM,CAAT;AAYA;;AACA;AAAC,sBAAC,cAAD;AACC,IAAA,UAAU,EAAE,KAAKS,KAAL,CAAWC,KAAX,CAAiBC,MAD9B;AAEC,IAAA,IAAI,EAAE,KAAKC,aAFZ;AAGC,IAAA,OAAO,EAAE,IAHV;AAIC,IAAA,MAAM,eAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJT;AAKC,IAAA,gBAAgB,EAAC,eALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,KAAKH,KAAL,CAAWC,KAAX,CAAiBG,GAAjB,CAAqB,CAACC,CAAD,EAAIC,KAAJ,kBACpB;AAAK,IAAA,KAAK,EAAEC,KAAZ;AAAmB,IAAA,GAAG,EAAED,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACUA,KADV,CADD,CAPF,CAAD;AAeD,CApCD;;AAqCA,eAAelB,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\n\nconst FetchContent= () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    url:\"\"\n  });\n\n  useEffect((url) => {\n\n    setAppState({ loading: true });\n    const apiUrl = `http://api-v2.filmnet.ir`;\n    appState.url =  `/widgets/home-page?count=5`;\n\n    fetch(apiUrl+appState.url)\n      .then((res) => res.json())\n      .then((repos) => {\n        setAppState({ loading: false, repos: repos });\n      });\n  }, [setAppState]);\n  return \n  (<InfiniteScroll\n    dataLength={this.state.items.length}\n    next={this.fetchMoreData}\n    hasMore={true}\n    loader={<h4>Loading...</h4>}\n    scrollableTarget=\"scrollableDiv\"\n  >\n    {this.state.items.map((i, index) => (\n      <div style={style} key={index}>\n        div - #{index}\n      </div>\n    ))}\n  </InfiniteScroll>\n  \n  );\n}\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}