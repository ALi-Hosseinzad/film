{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: null\n  });\n  useEffect(() => {\n    if (setAppState.nextURL) {\n      setAppState({\n        loading: true\n      });\n      fetch(apiUrl + url).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url\n        });\n      });\n    } else {\n      setAppState({\n        loading: true\n      });\n      const url = \"/widgets/home-page?count=5\";\n      fetch(apiUrl + url).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url\n        });\n      });\n    }\n  }, [setAppState]);\n\n  const FetchContent = () => {\n    FetchContent();\n  };\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: appState.repos[0].length,\n    next: FetchContent,\n    hasMore: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, appState.repos[0].map(() => /*#__PURE__*/React.createElement(ListLoading, {\n    key: appState.repos[0].id,\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","ListLoading","apiUrl","appState","setAppState","loading","repos","nextURL","fetch","url","then","res","json","meta","next_url","length","map","id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAMI,MAAM,GAAI,0BAAhB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC;AACvCS,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAC;AAH+B,GAAD,CAAxC;AAMEZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGS,WAAW,CAACG,OAAf,EAAuB;AACrBH,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACAG,MAAAA,KAAK,CAACN,MAAM,GAAGO,GAAV,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESJ,KAAD,IAAW;AACfF,QAAAA,WAAW,CAAC;AAAEC,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,KAAK,EAAEA,KAAzB;AAA+BC,UAAAA,OAAO,EAACD,KAAK,CAACO,IAAN,CAAWC;AAAlD,SAAD,CAAX;AACD,OAJH;AAKD,KAPD,MAQI;AACFV,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACA,YAAMI,GAAG,GAAG,4BAAZ;AACAD,MAAAA,KAAK,CAACN,MAAM,GAAGO,GAAV,CAAL,CACGC,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESJ,KAAD,IAAW;AACfF,QAAAA,WAAW,CAAC;AAAEC,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,KAAK,EAAEA,KAAzB;AAA+BC,UAAAA,OAAO,EAACD,KAAK,CAACO,IAAN,CAAWC;AAAlD,SAAD,CAAX;AACD,OAJH;AAKD;AAEF,GAnBQ,EAmBN,CAACV,WAAD,CAnBM,CAAT;;AAoBA,QAAMJ,YAAY,GAAG,MAAM;AACzBA,IAAAA,YAAY;AACf,GAFC;;AAIF,sBACE,oBAAC,cAAD;AACA,IAAA,UAAU,EAAEG,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkBS,MAD9B;AAEA,IAAA,IAAI,EAAEf,YAFN;AAGA,IAAA,OAAO,EAAE,IAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKCG,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkBU,GAAlB,CAAsB,mBACrB,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEb,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkBW,EADzB;AAEE,IAAA,SAAS,EAAEd,QAAQ,CAACE,OAFtB;AAGE,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CALD,CADF;AAeD,CAhDD;;AAiDA,eAAeN,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL:null\n  });\n  \n    useEffect(() => {\n      if(setAppState.nextURL){\n        setAppState({ loading: true });\n        fetch(apiUrl + url)\n          .then((res) => res.json())\n          .then((repos) => {\n            setAppState({ loading: false, repos: repos,nextURL:repos.meta.next_url });\n          });\n      }\n      else{\n        setAppState({ loading: true });\n        const url = \"/widgets/home-page?count=5\";\n        fetch(apiUrl + url)\n          .then((res) => res.json())\n          .then((repos) => {\n            setAppState({ loading: false, repos: repos,nextURL:repos.meta.next_url });\n          });\n      }\n      \n    }, [setAppState]);\n    const FetchContent = () => {\n      FetchContent()\n  };\n\n  return (\n    <InfiniteScroll\n    dataLength={appState.repos[0].length}\n    next={FetchContent}\n    hasMore={true}\n  >\n    {appState.repos[0].map(() => (\n      <ListLoading\n        key={appState.repos[0].id}\n        isLoading={appState.loading}\n        repos={appState.repos}\n      />\n    ))}\n  </InfiniteScroll>\n  );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}