{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore: true,\n    url: \"/widgets/home-page?count=5\"\n  });\n  useEffect(() => {\n    const apiUrl = `http://api-v2.filmnet.ir`;\n    setAppState({\n      loading: true\n    });\n    fetch(apiUrl + appState.url).then(res => res.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos,\n        ulr: repos.meta.next_url\n      });\n    });\n  }, [setAppState]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: fetchMoreData // hasMore={appState.hasMore}\n    ,\n    scrollableTarget: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, appState.repos.map((i, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  })))), \";\");\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","ListLoading","appState","setAppState","loading","repos","hasMore","url","apiUrl","fetch","then","res","json","ulr","meta","next_url","fetchMoreData","map","i","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE,IAH8B;AAIvCC,IAAAA,GAAG,EAAE;AAJkC,GAAD,CAAxC;AAOAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,MAAM,GAAI,0BAAhB;AACAL,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AAEAK,IAAAA,KAAK,CAACD,MAAM,GAAGN,QAAQ,CAACK,GAAnB,CAAL,CACGG,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESL,KAAD,IAAW;AACfF,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA,KAAzB;AAAgCQ,QAAAA,GAAG,EAAER,KAAK,CAACS,IAAN,CAAWC;AAAhD,OAAD,CAAX;AACD,KAJH;AAKD,GATQ,EASN,CAACZ,WAAD,CATM,CAAT;AAUA,sBACE;AAAK,IAAA,EAAE,EAAC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,IAAI,EAAEa,aADR,CAEE;AAFF;AAGE,IAAA,gBAAgB,EAAC,eAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGd,QAAQ,CAACG,KAAT,CAAeY,GAAf,CAAmB,CAACC,CAAD,EAAIC,KAAJ,kBAClB;AAAK,IAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEjB,QAAQ,CAACE,OAAjC;AAA0C,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADD,CALH,CADF,MADF;AAgBD,CAnCD;;AAoCA,eAAeL,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore: true,\n    url: \"/widgets/home-page?count=5\",\n  });\n\n  useEffect(() => {\n    const apiUrl = `http://api-v2.filmnet.ir`;\n    setAppState({ loading: true });\n\n    fetch(apiUrl + appState.url)\n      .then((res) => res.json())\n      .then((repos) => {\n        setAppState({ loading: false, repos: repos, ulr: repos.meta.next_url });\n      });\n  }, [setAppState]);\n  return (\n    <div id=\"scrollableDiv\">\n      <InfiniteScroll\n        next={fetchMoreData}\n        // hasMore={appState.hasMore}\n        scrollableTarget=\"scrollableDiv\"\n      >\n        {appState.repos.map((i, index) => (\n          <div key={index}>\n            <ListLoading isLoading={appState.loading} repos={appState.repos} />\n          </div>\n        ))}\n      </InfiniteScroll>\n      ;\n    </div>\n  );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}