{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\"\n  });\n  Fetch(appState.nextURL);\n\n  function Fetch(x) {\n    useEffect(() => {\n      FetchContent(x);\n    }, [setAppState]);\n  }\n\n  function FetchContent(nextUrl) {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + nextUrl;\n    console.log(\"***\" + URL + \"***\");\n    setAppState({\n      loading: true\n    });\n    fetch(URL).then(res => res.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos,\n        nextURL: repos.meta.next_url\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: 5,\n    hasMore: true,\n    inverse: true,\n    style: {\n      display: 'flex',\n      flexDirection: 'column-reverse'\n    },\n    val: console.log(appState.nextURL),\n    next: Fetch(\"/widgets/home-page?offset=5&count=5\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","nextURL","Fetch","x","FetchContent","nextUrl","apiUrl","URL","console","log","fetch","then","res","json","meta","next_url","display","flexDirection"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE;AAH8B,GAAD,CAAxC;AAKAC,EAAAA,KAAK,CAACL,QAAQ,CAACI,OAAV,CAAL;;AACA,WAASC,KAAT,CAAeC,CAAf,EAAkB;AAChBb,IAAAA,SAAS,CAAC,MAAM;AACdc,MAAAA,YAAY,CAACD,CAAD,CAAZ;AACD,KAFQ,EAEN,CAACL,WAAD,CAFM,CAAT;AAGD;;AACD,WAASM,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,UAAMC,MAAM,GAAG,0BAAf;AACA,UAAMC,GAAG,GAAGD,MAAM,GAACD,OAAnB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAMF,GAAN,GAAU,KAAtB;AACAT,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AACAW,IAAAA,KAAK,CAACH,GAAD,CAAL,CACGI,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESX,KAAD,IAAW;AACfF,MAAAA,WAAW,CAAC;AACVC,QAAAA,OAAO,EAAE,KADC;AAEVC,QAAAA,KAAK,EAAEA,KAFG;AAGVC,QAAAA,OAAO,EAAED,KAAK,CAACc,IAAN,CAAWC;AAHV,OAAD,CAAX;AAKD,KARH;AAUD;;AACD,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAE,CADd;AAEE,IAAA,OAAO,EAAE,IAFX;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,aAAa,EAAE;AAAlC,KAJT;AAKG,IAAA,GAAG,EAAET,OAAO,CAACC,GAAR,CAAYZ,QAAQ,CAACI,OAArB,CALR;AAMG,IAAA,IAAI,EAAEC,KAAK,CAAC,qCAAD,CANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEL,QAAQ,CAACE,OAAjC;AAA0C,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,CADF;AAYD,CAzCD;;AA0CA,eAAeL,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n  });\n  Fetch(appState.nextURL);\n  function Fetch(x) {\n    useEffect(() => {\n      FetchContent(x);\n    }, [setAppState]);\n  }\n  function FetchContent(nextUrl) {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl+nextUrl;\n    console.log(\"***\"+URL+\"***\");\n    setAppState({ loading: true });\n    fetch(URL)\n      .then((res) => res.json())\n      .then((repos) => {\n        setAppState({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url,\n        });\n      });\n      \n  }\n  return (\n    <InfiniteScroll\n      dataLength={5}\n      hasMore={true}\n      inverse={true}\n      style={{ display: 'flex', flexDirection: 'column-reverse' }} \n       val={console.log(appState.nextURL)}\n       next={Fetch(\"/widgets/home-page?offset=5&count=5\")}\n    >\n      <ListLoading isLoading={appState.loading} repos={appState.repos} />\n    </InfiniteScroll>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}