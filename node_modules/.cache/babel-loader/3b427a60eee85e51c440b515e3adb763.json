{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true\n  });\n  const [page, setPage] = useState({\n    items: Array\n  });\n  Fetch(appState.nextURL);\n  setPage({\n    items: appState\n  });\n\n  function Fetch(nextUrl) {\n    useEffect(() => {\n      const apiUrl = \"http://api-v2.filmnet.ir\";\n      const URL = apiUrl + nextUrl;\n      setAppState({\n        loading: true\n      });\n      fetch(URL).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos,\n          nextURL: repos.meta.next_url\n        });\n        setPage([appState]);\n\n        if (!repos.meta.next_url) {\n          setAppState({\n            hasMore: false\n          });\n        }\n      });\n    }, [setAppState]);\n  } // function FetchMore(url) {\n  //   console.log(url);\n  //   Fetch(url);\n  // }\n\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: window.length,\n    hasMore: appState.hasMore,\n    inverse: true,\n    style: {\n      display: \"flex\",\n      flexDirection: \"column-reverse\"\n    } // key={Fetch(appState.nextURL)}\n    ,\n    next: Fetch(appState.nextURL),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, page.items.map((item, index) => /*#__PURE__*/React.createElement(ListLoading, {\n    key: index,\n    isLoading: appState.loading,\n    repos: appState.repos,\n    val: console.log(page),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","nextURL","hasMore","page","setPage","items","Array","Fetch","nextUrl","apiUrl","URL","fetch","then","res","json","meta","next_url","window","length","display","flexDirection","map","item","index","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE,4BAH8B;AAIvCC,IAAAA,OAAO,EAAE;AAJ8B,GAAD,CAAxC;AAMA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC;AAACc,IAAAA,KAAK,EAACC;AAAP,GAAD,CAAhC;AACAC,EAAAA,KAAK,CAACV,QAAQ,CAACI,OAAV,CAAL;AACAG,EAAAA,OAAO,CAAC;AAACC,IAAAA,KAAK,EAACR;AAAP,GAAD,CAAP;;AACA,WAASU,KAAT,CAAeC,OAAf,EAAwB;AACtBlB,IAAAA,SAAS,CAAC,MAAM;AACd,YAAMmB,MAAM,GAAG,0BAAf;AACA,YAAMC,GAAG,GAAGD,MAAM,GAAGD,OAArB;AACAV,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACAY,MAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESZ,KAAD,IAAW;AACfF,QAAAA,WAAW,CAAC;AACVC,UAAAA,OAAO,EAAE,KADC;AAEVC,UAAAA,KAAK,EAAEA,KAFG;AAGVC,UAAAA,OAAO,EAACD,KAAK,CAACe,IAAN,CAAWC;AAHT,SAAD,CAAX;AAKAZ,QAAAA,OAAO,CAAC,CAACP,QAAD,CAAD,CAAP;;AAEA,YAAI,CAACG,KAAK,CAACe,IAAN,CAAWC,QAAhB,EAA0B;AACxBlB,UAAAA,WAAW,CAAC;AAAEI,YAAAA,OAAO,EAAE;AAAX,WAAD,CAAX;AACD;AACF,OAbH;AAcD,KAlBQ,EAkBN,CAACJ,WAAD,CAlBM,CAAT;AAmBD,GA/ByB,CAiC1B;AACA;AACA;AACA;;;AACA,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEmB,MAAM,CAACC,MADrB;AAEE,IAAA,OAAO,EAAErB,QAAQ,CAACK,OAFpB;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,KAAK,EAAE;AAAEiB,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,aAAa,EAAE;AAAlC,KAJT,CAKE;AALF;AAME,IAAA,IAAI,EAAEb,KAAK,CAACV,QAAQ,CAACI,OAAV,CANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGE,IAAI,CAACE,KAAL,CAAWgB,GAAX,CAAe,CAACC,IAAD,EAAOC,KAAP,kBACd,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAEA,KAAlB;AAAyB,IAAA,SAAS,EAAE1B,QAAQ,CAACE,OAA7C;AAAsD,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAAtE;AAA6E,IAAA,GAAG,EAAGwB,OAAO,CAACC,GAAR,CAAYtB,IAAZ,CAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CARH,CADF;AAcD,CAnDD;;AAoDA,eAAeR,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true,\n  });\n  const [page, setPage] = useState({items:Array});\n  Fetch(appState.nextURL);\n  setPage({items:appState})\n  function Fetch(nextUrl) {\n    useEffect(() => {\n      const apiUrl = \"http://api-v2.filmnet.ir\";\n      const URL = apiUrl + nextUrl;\n      setAppState({ loading: true });\n      fetch(URL)\n        .then((res) => res.json())\n        .then((repos) => {\n          setAppState({\n            loading: false,\n            repos: repos,\n            nextURL:repos.meta.next_url\n          });\n          setPage([appState]);\n          \n          if (!repos.meta.next_url) {\n            setAppState({ hasMore: false });\n          }\n        });\n    }, [setAppState]);\n  }\n\n  // function FetchMore(url) {\n  //   console.log(url);\n  //   Fetch(url);\n  // }\n  return (\n    <InfiniteScroll\n      dataLength={window.length}\n      hasMore={appState.hasMore}\n      inverse={true}\n      style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n      // key={Fetch(appState.nextURL)}\n      next={Fetch(appState.nextURL)}\n    >\n      {page.items.map((item, index) => (\n        <ListLoading key={index} isLoading={appState.loading} repos={appState.repos} val ={console.log(page)}/>\n      ))}\n    </InfiniteScroll>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}