{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore: false,\n    url: \"/widgets/home-page?count=5\",\n    data: null\n  });\n  useEffect(() => {\n    setAppState({\n      loading: true\n    });\n    fetch(apiUrl + appState.url).then(res => res.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos,\n        url: repos.meta.next_url\n      });\n    }); // fetch(apiUrl + appState.url)\n    // .then((res) => res.json())\n    // .then((data) => {\n    //   setAppState({\n    //     data: data,\n    //   });\n    //   console.log(data);\n    // });\n  }, [setAppState]);\n\n  const fetchMore = () => {\n    fetch(apiUrl + appState.url).then(res => res.json()).then(data => {\n      setAppState({\n        data: data\n      });\n      console.log(data);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  });\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContent","ListLoading","apiUrl","appState","setAppState","loading","repos","hasMore","url","data","fetch","then","res","json","meta","next_url","fetchMore","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAMI,MAAM,GAAI,0BAAhB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC;AACvCS,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE,KAH8B;AAIvCC,IAAAA,GAAG,EAAE,4BAJkC;AAKvCC,IAAAA,IAAI,EAAE;AALiC,GAAD,CAAxC;AAQAd,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AAEAK,IAAAA,KAAK,CAACR,MAAM,GAAGC,QAAQ,CAACK,GAAnB,CAAL,CACGG,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESL,KAAD,IAAW;AACfF,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA,KAAzB;AAAgCE,QAAAA,GAAG,EAAEF,KAAK,CAACQ,IAAN,CAAWC;AAAhD,OAAD,CAAX;AACD,KAJH,EAHc,CASZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAjBQ,EAiBN,CAACX,WAAD,CAjBM,CAAT;;AAmBA,QAAMY,SAAS,GAAG,MAAM;AACtBN,IAAAA,KAAK,CAACR,MAAM,GAAGC,QAAQ,CAACK,GAAnB,CAAL,CACGG,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESF,IAAD,IAAU;AACdL,MAAAA,WAAW,CAAC;AACVK,QAAAA,IAAI,EAAEA;AADI,OAAD,CAAX;AAGAQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACD,KAPH;AAQD,GATD;;AAUA,sBAAQ,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAEN,QAAQ,CAACE,OAAjC;AAA0C,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AAGD,CA3CD;;AA4CA,eAAeN,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContent = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore: false,\n    url: \"/widgets/home-page?count=5\",\n    data: null,\n  });\n\n  useEffect(() => {\n    setAppState({ loading: true });\n\n    fetch(apiUrl + appState.url)\n      .then((res) => res.json())\n      .then((repos) => {\n        setAppState({ loading: false, repos: repos, url: repos.meta.next_url });\n      });\n\n      // fetch(apiUrl + appState.url)\n      // .then((res) => res.json())\n      // .then((data) => {\n      //   setAppState({\n      //     data: data,\n      //   });\n      //   console.log(data);\n      // });\n  }, [setAppState]);\n\n  const fetchMore = () => {\n    fetch(apiUrl + appState.url)\n      .then((res) => res.json())\n      .then((data) => {\n        setAppState({\n          data: data,\n        });\n        console.log(data);\n      });\n  };\n  return (<ListLoading isLoading={appState.loading} repos={appState.repos} />\n  \n    );\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}