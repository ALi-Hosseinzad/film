{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/ContentItems.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentHeader from \"./ContentHeader\";\nimport ContentImg from \"./ContentImg\";\nimport \"./ContentItem.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InfiniteScroll from \"react-infinite-scroll-component\"; // import FetchContent from \"./scrollFetch\";\n\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport FetchContent from \"./FetchContent\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(0),\n    textAlign: \"start\",\n    color: theme.palette.text.primary,\n    backgroundColor: theme.palette.background.default\n  }\n}));\n\nconst ContetntItems = props => {\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null\n  });\n\n  const FetchContent = url => {\n    // \n    useEffect(() => {\n      setAppState({\n        loading: true\n      });\n      fetch(apiUrl + url).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos\n        });\n      });\n    }, [setAppState]); // return <ListLoading isLoading={appState.loading} repos={appState.repos}/>;\n  };\n\n  const classes = useStyles();\n  const {\n    repos\n  } = props;\n  if (!repos || repos.length === 0) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 44\n    }\n  }, \"server don't responce , sorry\");\n  const val = Object.values(repos);\n  const baseURL = val[1].next_url;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, val.map(repo => {\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      className: \"content-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      key: repo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Paper, {\n      className: classes.paper,\n      style: {\n        boxShadow: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ContentHeader, Object.assign({}, repo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ContentImg, Object.assign({}, repo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(InfiniteScroll, {\n      dataLength: val.length,\n      next: FetchContent(baseURL),\n      hasMore: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }))));\n  }));\n};\n\nexport default ContetntItems;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/ContentItems.jsx"],"names":["React","useEffect","useState","ContentHeader","ContentImg","makeStyles","Grid","Paper","InfiniteScroll","ContentLoading","ContentItems","FetchContent","useStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","primary","backgroundColor","background","default","ContetntItems","props","apiUrl","appState","setAppState","loading","repos","url","fetch","then","res","json","classes","length","val","Object","values","baseURL","next_url","map","repo","boxShadow"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentHeader from \"./ContentHeader\";\nimport ContentImg from \"./ContentImg\";\nimport \"./ContentItem.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n// import FetchContent from \"./scrollFetch\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport FetchContent from \"./FetchContent\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(0),\n    textAlign: \"start\",\n    color: theme.palette.text.primary,\n    backgroundColor: theme.palette.background.default,\n  },\n}));\nconst ContetntItems = (props) => {\n  const apiUrl = `http://api-v2.filmnet.ir`;\n    const [appState, setAppState] = useState({\n      loading: false,\n      repos: null,\n    });\n  const FetchContent = (url) => {\n    // \n    \n    useEffect(() => {\n      setAppState({ loading: true });\n      fetch(apiUrl + url)\n        .then((res) => res.json())\n        .then((repos) => {\n          setAppState({ loading: false, repos: repos });\n        });\n    }, [setAppState]);\n    // return <ListLoading isLoading={appState.loading} repos={appState.repos}/>;\n  };\n  const classes = useStyles();\n  const { repos } = props;\n  if (!repos || repos.length === 0) return <p>server don't responce , sorry</p>;\n  const val = Object.values(repos);\n  const baseURL = val[1].next_url;\n  return (\n    <div className={classes.root}>\n      {val.map((repo) => {\n        return (\n          <Grid container spacing={3} className=\"content-body\">\n            <Grid item xs={12} key={repo}>\n              <Paper className={classes.paper} style={{ boxShadow: \"none\" }}>\n                <ContentHeader {...repo} />\n                <ContentImg {...repo} />\n                <InfiniteScroll\n                  dataLength={val.length}\n                  next={FetchContent(baseURL)}\n                  hasMore={true}\n                >\n\n                </InfiniteScroll>\n              </Paper>\n            </Grid>\n          </Grid>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ContetntItems;\n"]},"metadata":{},"sourceType":"module"}