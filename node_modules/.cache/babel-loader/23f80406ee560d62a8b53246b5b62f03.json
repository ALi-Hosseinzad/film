{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null\n  });\n  const [next, setNext] = useState([]);\n  const pageURL = \"/widgets/home-page?count=5\";\n\n  function fetch(url) {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + url;\n    setAppState({\n      loading: true\n    });\n    fetch(URL).then(repos => repos.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos\n      });\n      setNext(prev => [...prev, repos.meta.next_url]);\n\n      if (!repos.meta.next_url) {\n        setAppState({\n          hasMore: false\n        });\n      }\n    });\n  }\n\n  useEffect(() => {\n    fetch(pageURL);\n  }, [setAppState]);\n\n  function FetchMore(props, prevPrpos) {\n    console.log(props.repos); // props.repos.map((item) => {\n\n    prevPrpos.map(val => {\n      // if (item.meta.next_url === val) {\n      console.log(val); //Fetch(val);\n      //}\n    }); //});\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"scrollableDiv\",\n    style: {\n      height: \"auto\",\n      overflow: \"auto\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: window.length,\n    hasMore: false,\n    inverse: true,\n    scrollableTarget: \"scrollableDiv\" //key={console.log(appState.repos.meta)}\n    ,\n    next: FetchMore(appState, next),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: false,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","next","setNext","pageURL","fetch","url","apiUrl","URL","then","json","prev","meta","next_url","hasMore","FetchMore","props","prevPrpos","console","log","map","val","height","overflow","window","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAC,KAD+B;AAEvCC,IAAAA,KAAK,EAAC;AAFiC,GAAD,CAAxC;AAIA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMY,OAAO,GAAG,4BAAhB;;AAED,WAASC,KAAT,CAAeC,GAAf,EAAoB;AACjB,UAAMC,MAAM,GAAG,0BAAf;AACA,UAAMC,GAAG,GAAGD,MAAM,GAAGD,GAArB;AACAP,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AACAK,IAAAA,KAAK,CAACG,GAAD,CAAL,CACGC,IADH,CACSR,KAAD,IAAWA,KAAK,CAACS,IAAN,EADnB,EAEGD,IAFH,CAESR,KAAD,IAAW;AACnBF,MAAAA,WAAW,CAAC;AACVC,QAAAA,OAAO,EAAE,KADC;AAEVC,QAAAA,KAAK,EAAEA;AAFG,OAAD,CAAX;AAIAE,MAAAA,OAAO,CAAEQ,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUV,KAAK,CAACW,IAAN,CAAWC,QAArB,CAAX,CAAP;;AACA,UAAI,CAACZ,KAAK,CAACW,IAAN,CAAWC,QAAhB,EAA0B;AACxBd,QAAAA,WAAW,CAAC;AAAEe,UAAAA,OAAO,EAAE;AAAX,SAAD,CAAX;AACD;AACF,KAXC;AAYH;;AACCvB,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,KAAK,CAACD,OAAD,CAAL;AACD,GAFQ,EAEN,CAACL,WAAD,CAFM,CAAT;;AAIA,WAASgB,SAAT,CAAmBC,KAAnB,EAA0BC,SAA1B,EAAqC;AACnCC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACf,KAAlB,EADmC,CAElC;;AACGgB,IAAAA,SAAS,CAACG,GAAV,CAAeC,GAAD,IAAS;AACtB;AACGH,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,EAFmB,CAGnB;AACF;AACD,KALD,EAH+B,CAShC;AACJ;;AACD,sBACE;AAAK,IAAA,EAAE,EAAC,eAAR;AAAwB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE,MAAV;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEC,MAAM,CAACC,MADrB;AAEE,IAAA,OAAO,EAAE,KAFX;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,gBAAgB,EAAC,eAJnB,CAKE;AALF;AAME,IAAA,IAAI,EAAEV,SAAS,CAACjB,QAAD,EAAWI,IAAX,CANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASI,oBAAC,WAAD;AAAc,IAAA,SAAS,EAAE,KAAzB;AAAgC,IAAA,KAAK,EAAEJ,QAAQ,CAACG,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADF,CADF;AAgBD,CAzDD;;AA0DA,eAAeL,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading:false,\n    repos:null,\n  });\n  const [next, setNext] = useState([]);\n  const pageURL = \"/widgets/home-page?count=5\";\n\n function fetch(url) {\n    const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + url;\n    setAppState({ loading: true });\n    fetch(URL)\n      .then((repos) => repos.json())\n      .then((repos) => {\n    setAppState({\n      loading: false,\n      repos: repos,\n    });\n    setNext((prev) => [...prev, repos.meta.next_url]);\n    if (!repos.meta.next_url) {\n      setAppState({ hasMore: false });\n    }\n  })\n}\n  useEffect(() => {\n    fetch(pageURL);\n  }, [setAppState]);\n\n  function FetchMore(props, prevPrpos) {\n    console.log(props.repos);\n     // props.repos.map((item) => {\n        prevPrpos.map((val) => {\n         // if (item.meta.next_url === val) {\n            console.log(val);\n            //Fetch(val);\n          //}\n        });\n       //});\n  }\n  return (\n    <div id=\"scrollableDiv\" style={{ height: \"auto\", overflow: \"auto\" }}>\n      <InfiniteScroll\n        dataLength={window.length}\n        hasMore={false}\n        inverse={true}\n        scrollableTarget=\"scrollableDiv\"\n        //key={console.log(appState.repos.meta)}\n        next={FetchMore(appState, next)}\n      >\n        {/* //{appState.map((item, index) => ( */}\n          <ListLoading  isLoading={false} repos={appState.repos} />\n        {/* ))} */}\n      </InfiniteScroll>\n    </div>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}