{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport qwest from \"qwest\";\n\nconst FetchContent = url => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore: false,\n    url: null\n  });\n  useEffect(() => {\n    setAppState({\n      loading: true\n    });\n    const url = \"/widgets/home-page?count=5\";\n    fetch(apiUrl + url).then(res => res.json()).then(repos => {\n      setAppState({\n        loading: false,\n        repos: repos\n      });\n    });\n  }, [setAppState]);\n\n  const loadItems = page => {\n    var self = this;\n    var url = \"/users/8665091/favorites\";\n\n    if (this.state.nextHref) {\n      url = this.state.nextHref;\n    }\n\n    qwest.get(url, {\n      linked_partitioning: 1,\n      page_size: 10\n    }, {\n      cache: true\n    }).then(function (xhr, resp) {\n      if (resp) {\n        var tracks = self.state.tracks;\n        resp.collection.map(track => {\n          if (track.artwork_url == null) {\n            track.artwork_url = track.user.avatar_url;\n          }\n\n          tracks.push(track);\n        });\n\n        if (resp.next_href) {\n          self.setState({\n            tracks: tracks,\n            nextHref: resp.next_href\n          });\n        } else {\n          self.setState({\n            hasMoreItems: false\n          });\n        }\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default FetchContent;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","qwest","FetchContent","url","ListLoading","apiUrl","appState","setAppState","loading","repos","hasMore","fetch","then","res","json","loadItems","page","self","state","nextHref","get","linked_partitioning","page_size","cache","xhr","resp","tracks","collection","map","track","artwork_url","user","avatar_url","push","next_href","setState","hasMoreItems"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,YAAY,GAAIC,GAAD,IAAS;AAC5B,QAAMC,WAAW,GAAGN,cAAc,CAACC,YAAD,CAAlC;AACA,QAAMM,MAAM,GAAI,0BAAhB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC;AACvCW,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE,KAH8B;AAIvCP,IAAAA,GAAG,EAAE;AAJkC,GAAD,CAAxC;AAMAP,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW,CAAC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAX;AACA,UAAML,GAAG,GAAG,4BAAZ;AACAQ,IAAAA,KAAK,CAACN,MAAM,GAAGF,GAAV,CAAL,CACGS,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESH,KAAD,IAAW;AACfF,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEA;AAAzB,OAAD,CAAX;AACD,KAJH;AAKD,GARQ,EAQN,CAACF,WAAD,CARM,CAAT;;AAUA,QAAMQ,SAAS,GAAIC,IAAD,IAAU;AAC1B,QAAIC,IAAI,GAAG,IAAX;AAEA,QAAId,GAAG,GAAG,0BAAV;;AACA,QAAI,KAAKe,KAAL,CAAWC,QAAf,EAAyB;AACvBhB,MAAAA,GAAG,GAAG,KAAKe,KAAL,CAAWC,QAAjB;AACD;;AAEDlB,IAAAA,KAAK,CACFmB,GADH,CAEIjB,GAFJ,EAGI;AACEkB,MAAAA,mBAAmB,EAAE,CADvB;AAEEC,MAAAA,SAAS,EAAE;AAFb,KAHJ,EAOI;AACEC,MAAAA,KAAK,EAAE;AADT,KAPJ,EAWGX,IAXH,CAWQ,UAAUY,GAAV,EAAeC,IAAf,EAAqB;AACzB,UAAIA,IAAJ,EAAU;AACR,YAAIC,MAAM,GAAGT,IAAI,CAACC,KAAL,CAAWQ,MAAxB;AACAD,QAAAA,IAAI,CAACE,UAAL,CAAgBC,GAAhB,CAAqBC,KAAD,IAAW;AAC7B,cAAIA,KAAK,CAACC,WAAN,IAAqB,IAAzB,EAA+B;AAC7BD,YAAAA,KAAK,CAACC,WAAN,GAAoBD,KAAK,CAACE,IAAN,CAAWC,UAA/B;AACD;;AAEDN,UAAAA,MAAM,CAACO,IAAP,CAAYJ,KAAZ;AACD,SAND;;AAQA,YAAIJ,IAAI,CAACS,SAAT,EAAoB;AAClBjB,UAAAA,IAAI,CAACkB,QAAL,CAAc;AACZT,YAAAA,MAAM,EAAEA,MADI;AAEZP,YAAAA,QAAQ,EAAEM,IAAI,CAACS;AAFH,WAAd;AAID,SALD,MAKO;AACLjB,UAAAA,IAAI,CAACkB,QAAL,CAAc;AACZC,YAAAA,YAAY,EAAE;AADF,WAAd;AAGD;AACF;AACF,KAjCH;AAkCD,GA1CD;;AA4CA,sBAAO,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAE9B,QAAQ,CAACE,OAAjC;AAA0C,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAhED;;AAiEA,eAAeP,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport qwest from \"qwest\";\nconst FetchContent = (url) => {\n  const ListLoading = ContentLoading(ContentItems);\n  const apiUrl = `http://api-v2.filmnet.ir`;\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    hasMore: false,\n    url: null,\n  });\n  useEffect(() => {\n    setAppState({ loading: true });\n    const url = \"/widgets/home-page?count=5\";\n    fetch(apiUrl + url)\n      .then((res) => res.json())\n      .then((repos) => {\n        setAppState({ loading: false, repos: repos });\n      });\n  }, [setAppState]);\n\n  const loadItems = (page) => {\n    var self = this;\n\n    var url = \"/users/8665091/favorites\";\n    if (this.state.nextHref) {\n      url = this.state.nextHref;\n    }\n\n    qwest\n      .get(\n        url,\n        {\n          linked_partitioning: 1,\n          page_size: 10,\n        },\n        {\n          cache: true,\n        }\n      )\n      .then(function (xhr, resp) {\n        if (resp) {\n          var tracks = self.state.tracks;\n          resp.collection.map((track) => {\n            if (track.artwork_url == null) {\n              track.artwork_url = track.user.avatar_url;\n            }\n\n            tracks.push(track);\n          });\n\n          if (resp.next_href) {\n            self.setState({\n              tracks: tracks,\n              nextHref: resp.next_href,\n            });\n          } else {\n            self.setState({\n              hasMoreItems: false,\n            });\n          }\n        }\n      });\n  };\n\n  return <ListLoading isLoading={appState.loading} repos={appState.repos} />;\n};\nexport default FetchContent;\n"]},"metadata":{},"sourceType":"module"}