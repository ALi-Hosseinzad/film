{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true\n  });\n  const [page, setPage] = useState([]);\n\n  function Fetch(nextUrl) {\n    useEffect(() => {\n      const apiUrl = \"http://api-v2.filmnet.ir\";\n      const URL = apiUrl + nextUrl;\n      setAppState({\n        loading: true\n      });\n      fetch(URL).then(res => res.json()).then(repos => {\n        setAppState({\n          loading: false,\n          repos: repos\n        });\n        setPage([]);\n\n        if (!repos.meta.next_url) {\n          setAppState({\n            hasMore: false\n          });\n        }\n      });\n    }, [setAppState]);\n  }\n\n  function FetchMore(url) {\n    console.log(url);\n    Fetch(\"/widgets/home-page?offset=5&count=5\");\n  }\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: window.length,\n    hasMore: true,\n    inverse: true,\n    style: {\n      display: \"flex\",\n      flexDirection: \"column-reverse\"\n    },\n    key: Fetch(appState.nextURL),\n    next: FetchMore(page.nextURL),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: appState.loading,\n    repos: appState.repos // key={console.log(appState)}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default FetchContents;","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/FetchContent.jsx"],"names":["React","useEffect","useState","ContentLoading","ContentItems","InfiniteScroll","FetchContents","ListLoading","appState","setAppState","loading","repos","nextURL","hasMore","page","setPage","Fetch","nextUrl","apiUrl","URL","fetch","then","res","json","meta","next_url","FetchMore","url","console","log","window","length","display","flexDirection"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,WAAW,GAAGJ,cAAc,CAACC,YAAD,CAAlC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AACvCQ,IAAAA,OAAO,EAAE,KAD8B;AAEvCC,IAAAA,KAAK,EAAE,IAFgC;AAGvCC,IAAAA,OAAO,EAAE,4BAH8B;AAIvCC,IAAAA,OAAO,EAAE;AAJ8B,GAAD,CAAxC;AAMA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;;AACA,WAASc,KAAT,CAAeC,OAAf,EAAwB;AACtBhB,IAAAA,SAAS,CAAC,MAAM;AACd,YAAMiB,MAAM,GAAG,0BAAf;AACF,YAAMC,GAAG,GAAGD,MAAM,GAAGD,OAArB;AACAR,MAAAA,WAAW,CAAC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAD,CAAX;AACAU,MAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESV,KAAD,IAAW;AACfF,QAAAA,WAAW,CAAC;AACVC,UAAAA,OAAO,EAAE,KADC;AAEVC,UAAAA,KAAK,EAAEA;AAFG,SAAD,CAAX;AAIAI,QAAAA,OAAO,CAAC,EAAD,CAAP;;AACA,YAAI,CAACJ,KAAK,CAACa,IAAN,CAAWC,QAAhB,EAA0B;AACxBhB,UAAAA,WAAW,CAAC;AAAEI,YAAAA,OAAO,EAAE;AAAX,WAAD,CAAX;AACD;AACF,OAXH;AAYC,KAhBQ,EAgBN,CAACJ,WAAD,CAhBM,CAAT;AAiBD;;AAED,WAASiB,SAAT,CAAmBC,GAAnB,EAAwB;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACCX,IAAAA,KAAK,CAAC,qCAAD,CAAL;AACF;;AACD,sBACE,oBAAC,cAAD;AACE,IAAA,UAAU,EAAEc,MAAM,CAACC,MADrB;AAEE,IAAA,OAAO,EAAE,IAFX;AAGE,IAAA,OAAO,EAAE,IAHX;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,aAAa,EAAE;AAAlC,KAJT;AAKE,IAAA,GAAG,EAAEjB,KAAK,CAACR,QAAQ,CAACI,OAAV,CALZ;AAME,IAAA,IAAI,EAAEc,SAAS,CAACZ,IAAI,CAACF,OAAN,CANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE,oBAAC,WAAD;AACE,IAAA,SAAS,EAAEJ,QAAQ,CAACE,OADtB;AAEE,IAAA,KAAK,EAAEF,QAAQ,CAACG,KAFlB,CAGE;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAiBD,CAlDD;;AAmDA,eAAeL,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst FetchContents = () => {\n  const ListLoading = ContentLoading(ContentItems);\n  const [appState, setAppState] = useState({\n    loading: false,\n    repos: null,\n    nextURL: \"/widgets/home-page?count=5\",\n    hasMore: true,\n  });\n  const [page, setPage] = useState([]);\n  function Fetch(nextUrl) {\n    useEffect(() => {\n      const apiUrl = \"http://api-v2.filmnet.ir\";\n    const URL = apiUrl + nextUrl;\n    setAppState({ loading: true });\n    fetch(URL)\n      .then((res) => res.json())\n      .then((repos) => {\n        setAppState({\n          loading: false,\n          repos: repos,\n        });\n        setPage([])\n        if (!repos.meta.next_url) {\n          setAppState({ hasMore: false });\n        }\n      });\n    }, [setAppState]);\n  }\n\n  function FetchMore(url) {\n    console.log(url);\n     Fetch(\"/widgets/home-page?offset=5&count=5\");\n  }\n  return (\n    <InfiniteScroll\n      dataLength={window.length}\n      hasMore={true}\n      inverse={true}\n      style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n      key={Fetch(appState.nextURL)}\n      next={FetchMore(page.nextURL)}   \n    >\n      {}\n      <ListLoading\n        isLoading={appState.loading}\n        repos={appState.repos}\n        // key={console.log(appState)}\n      />\n    </InfiniteScroll>\n  );\n};\nexport default FetchContents;\n"]},"metadata":{},"sourceType":"module"}