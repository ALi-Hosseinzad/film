{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/film/src/components/content/11.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport useInfiniteScroll from '@closeio/use-infinite-scroll';\nconst URL = 'http://api-v2.filmnet.ir';\nconst pageURL = '/widgets/home-page?count=5';\nexport default function Example() {\n  const ListLoading = ContentLoading(ContentItems);\n  const [items, setItems] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const [page, loaderRef, scrollerRef] = useInfiniteScroll({\n    hasMore\n  });\n\n  function Fetch(nextUrl) {\n    useEffect(() => {\n      (async () => {\n        const realPage = page + 1;\n        const resp = await fetch(`${URL + pageURL}&page=${realPage}`);\n        const data = await resp.json();\n        console.log(data.meta.next_url);\n        setHasMore(Fetch(data.meta.next_url));\n        setItems(prev => [...prev, data]);\n      })();\n    }, [page]);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: scrollerRef,\n    className: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, items.map(item => /*#__PURE__*/React.createElement(ListLoading, {\n    isLoading: false,\n    repos: item,\n    key: item.meta,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })), hasMore && /*#__PURE__*/React.createElement(\"div\", {\n    ref: loaderRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 19\n    }\n  }, \"Loading\\u2026\"));\n}","map":{"version":3,"sources":["/home/alihz/Desktop/react/film/src/components/content/11.jsx"],"names":["React","useState","useEffect","ContentLoading","ContentItems","useInfiniteScroll","URL","pageURL","Example","ListLoading","items","setItems","hasMore","setHasMore","page","loaderRef","scrollerRef","Fetch","nextUrl","realPage","resp","fetch","data","json","console","log","meta","next_url","prev","map","item"],"mappings":";AAAC,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACD,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AAEA,MAAMC,GAAG,GAAG,0BAAZ;AACA,MAAMC,OAAO,GAAG,4BAAhB;AACA,eAAe,SAASC,OAAT,GAAmB;AAC9B,QAAMC,WAAW,GAAGN,cAAc,CAACC,YAAD,CAAlC;AACF,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,IAAD,EAAOC,SAAP,EAAkBC,WAAlB,IAAiCX,iBAAiB,CAAC;AAAEO,IAAAA;AAAF,GAAD,CAAxD;;AAEF,WAASK,KAAT,CAAeC,OAAf,EAAwB;AACtBhB,IAAAA,SAAS,CAAC,MAAM;AACd,OAAC,YAAY;AACX,cAAMiB,QAAQ,GAAGL,IAAI,GAAG,CAAxB;AACA,cAAMM,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAEf,GAAG,GAACC,OAAQ,SAAQY,QAAS,EAAjC,CAAxB;AACA,cAAMG,IAAI,GAAG,MAAMF,IAAI,CAACG,IAAL,EAAnB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,IAAL,CAAUC,QAAtB;AACAd,QAAAA,UAAU,CAACI,KAAK,CAACK,IAAI,CAACI,IAAL,CAAUC,QAAX,CAAN,CAAV;AACAhB,QAAAA,QAAQ,CAACiB,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAASN,IAAT,CAAT,CAAR;AACD,OAPD;AAQD,KATQ,EASN,CAACR,IAAD,CATM,CAAT;AAUC;;AACD,sBACE;AAAK,IAAA,GAAG,EAAEE,WAAV;AAAwB,IAAA,SAAS,EAAC,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KAAK,CAACmB,GAAN,CAAUC,IAAI,iBACb,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAE,KAAxB;AAA+B,IAAA,KAAK,EAAEA,IAAtC;AAA4C,IAAA,GAAG,EAAEA,IAAI,CAACJ,IAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,EAIGd,OAAO,iBAAI;AAAK,IAAA,GAAG,EAAEG,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJd,CADF;AAQD","sourcesContent":[" import React, { useState, useEffect } from 'react';\n import ContentLoading from \"./ContentLoading\";\nimport ContentItems from \"./ContentItems\";\nimport useInfiniteScroll from '@closeio/use-infinite-scroll';\n\nconst URL = 'http://api-v2.filmnet.ir';\nconst pageURL = '/widgets/home-page?count=5';\nexport default function Example() {\n    const ListLoading = ContentLoading(ContentItems);\n  const [items, setItems] = useState([]);\n  const [hasMore, setHasMore] = useState(false);\n  const [page, loaderRef, scrollerRef] = useInfiniteScroll({ hasMore });\n\nfunction Fetch(nextUrl) {\n  useEffect(() => {\n    (async () => {\n      const realPage = page + 1;\n      const resp = await fetch(`${URL+pageURL}&page=${realPage}`);\n      const data = await resp.json();\n      console.log(data.meta.next_url);\n      setHasMore(Fetch(data.meta.next_url));\n      setItems(prev => [...prev,data]);\n    })();\n  }, [page]);\n  }\n  return (\n    <div ref={scrollerRef}  className=\"1\">\n      {items.map(item => (\n        <ListLoading isLoading={false} repos={item} key={item.meta}></ListLoading>\n      ))}\n      {hasMore && <div ref={loaderRef}>Loadingâ€¦</div>}\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}